<?php
    declare(strict_types=1);

    namespace ProcessWire;

    /*
     * FrontendForms module for ProcessWire to create and validate forms on the frontend
     *
     * Created by Jürgen K.
     * https://github.com/juergenweb
     * File name: FrontendForms.module
     * Created: 03.07.2022
     */

    use Exception;
    use FrontendForms\Form;
    use stdClass;
    use Valitron\Validator;

    class FrontendForms extends WireData implements Module, ConfigurableModule
    {

        // use an API path to the GitHub repository for the 100 most common passwords
        const TOP_PASSWORDS = 'https://api.github.com/repos/danielmiessler/SecLists/contents/Passwords/Common-Credentials/10-million-password-list-top-100.txt';
        // This url contains the commits for the passwords including the dates of the commits (used for last modification date)
        const LAST_PASSWORDS_MODIFICATION_URL = 'https://api.github.com/repos/danielmiessler/SecLists/commits?path=/Passwords/Common-Credentials/10-million-password-list-top-100.txt';

        const SUPPORTEDMAILMODULES = ['WireMailPostmark', 'WireMailPostmarkApp', 'WireMailSmtp', 'WireMailPHPMailer']; // Supported modules for sending emails in other modules based on FrontendForms

        public static string $framework = '';
        protected string $temp_uploadPath = ''; // the path to the temporary upload folder
        // the validator object
        protected Validator $Validator;

        /* Password field */
        protected Field $password_field; // the system password field with the name "pass"
        protected InputfieldPassword $password_object; // an object of the InputfieldPassword

        protected string $passwordPath = ''; // path to the top 100 passwords.txt file
        protected array $requirements = []; // the requirements as set in the pass field or in the module
        protected string $default_dateformat = ''; // the default date format as set in the processwire configuration file
        protected array $passwordList = []; // array that holds all passwords from passwords.txt
        protected string $last_check = ''; // date of the last monthly check of passwords
        protected array $blacklist = []; // array of all passwords inside the blacklist as stored inside the db

        protected string $modulePath = ''; // path to this module folder
        protected string $customFrameworksPath = ''; // path to the folder, where all custom framework JSON files can be stored
        protected array $moduleConfig = []; // array that holds all module config values
        protected string $lang = 'en'; // default language

        /* File uploads */
        protected bool $keepFiles = false; // keep files after attachments were sent (true) or delete them (false)

        /* Assets */
        protected string|int $input_removeJS = 0; // remove module JS or not (frontend)
        protected string|int $input_removeCSS = 0; // remove module CSS or not (frontend)

        /* Markup */
        protected object $defaultClasses; // all class names for the form
        protected string $input_requiredHintPosition = 'top'; // default position for the required text hint
        protected array $input_wrappers = []; // hold the name of the wrappers which should be removed
        protected array $input_appendLabel = []; // array which contains checkboxes and/or radios
        protected string|int $input_wrapperFormElements = 0; // add extra div over all form elements
        protected string $input_wrapperFormElementsCSSClass = ''; // the CSS class for the wrapperFormElements div
        protected string $input_framework = 'none.json'; // default framework selection
        protected string $input_descPosition = 'afterInput'; // default input field description position
        protected string|int $input_showasterisk = 1; // show asterisk on required fields
        protected string|int $input_ajaxformsubmission = 0; // submit forms via Ajax (1) or not (0)
        protected string|int $input_hideProgressBar = 0; // Hide the progressbar during form submission (1) or not (0)
        protected string $input_global_label_tag = ''; // the tag that should be used as the global tag for labels
        protected string $input_global_desc_tag = ''; // the tag that should be used as the global tag for descriptions
        protected string $input_global_notes_tag = ''; // the tag that should be used as the global tag for nots
        protected string $input_global_msg_tag = ''; // the tag that should be used as the global tag for messages (error and success message)

        /* Email configuration */
        protected string $input_emailTemplate = 'template_1.html'; // default email template
        protected array $email_template_files = []; // array containing all pathes to the email template files
        protected array $mailProperties = []; // array of placeholder variables for HTML templates
        protected array $emailTemplates = []; // email template names as a numeric array
        protected string $emailTemplatesPath = ''; // path to the email templates folder
        protected string $custom_emailTemplatesPath = ''; // path to the custom email templates folder
        protected array $mailPlaceholders = []; //  the array holds all custom mail properties for placeholder attributes as placeholder => value
        protected string $bodyHTML = ''; // declare property from WireMail class
        protected string $body = ''; // declare property from WireMail class

        /* Messages */
        protected string $input_requiredText = ''; // Text that should be displayed on each form for required fields
        protected string $input_alertSuccessText = ''; // Text that should be displayed after successful submission
        protected string $input_alertErrorText = ''; // Text that should be displayed after failed submission

        /* Max attempts */
        protected string|int $input_maxAttempts = 5; // the max number of failed attempts to submit a form
        protected string|int $input_logFailedAttempts = 0; // by default, failed login attempts will not be logged

        // Time measurement
        protected string|int $input_minTime = 3; // min time before a form should be submitted
        protected string|int $input_maxTime = 3600; // max time until a form should be submitted

        /* IP blacklist */
        protected string|int $input_useIPBan = 1; // by default, IP addresses on the blacklist cannot view the forms
        protected string $input_preventIPs = ''; // These IP addresses are excluded from visiting a form in on the site

        /* CAPTCHA text settings */
        protected string $input_captchaCharset = ''; // the characters that should be used to create the random text string
        protected string|int $input_captchaHeight = 60; // the height of the captcha image
        protected string|int $input_captchaWidth = 180; // the width of the captcha image
        protected string|int $input_offset = 5; // the offset of the puzzle piece of the slider captcha
        protected string $input_captchaTextColor = ''; // the text color of the captcha image
        protected string|int $input_captchaFontsize = 20; // the font size of the captcha text
        protected string $input_captchaFontFamily = ''; // set the path to the folder where the font is located, that should be used
        protected array $input_captchaFonts = []; // array of all fonts found under the site tree
        protected string|int|null $input_charactersOffLine = 0; // set the characters off the line or in one line
        protected string|null $input_question = '';// the captcha question for the simple question captcha
        protected string|null $input_answers = '';// the possible answers

        /* CAPTCHA background */
        protected string $input_bgcolorchooser = 'random'; // use random or custom background colors
        protected string|int $input_bgnumberOfColors = 1; // the number of colors used for the background
        protected string $input_bgCustomColors = '#ddd'; // the pre-defined custom color used for the background

        /* CAPTCHA distortion lines */
        protected string|int $input_captchaNumberOfLines = 5; // the number of distortion lines over the captcha image
        protected string $input_colorchooser = 'random'; // use random or custom line colors
        protected string $input_captchaLinesColor = '#fff'; // the color of the distortion lines
        protected string|int $input_numberOfColorsOfLines = 1; // the number of colors used for the distortion lines

        /* CAPTCHA image filters */
        protected int|string $input_blurlevel = 0; // the level of the blur effect for images
        protected int|string $input_pixelatelevel = 0; // the level of the pixelate effect for images
        protected int|string|null $input_grayscale = 0; // add or remove grayscale effect

        /* CAPTCHA general */
        protected string $imagePath = ''; // the path to the directory where all captcha images are stored
        protected string $input_captchaType = 'none'; // enable or disable captcha on forms by entering the class name or none

        /* HTML5 form validation */
        protected string|int|bool $input_html5_validation = 0; // enable or disable HTML 5 form validation

        protected bool $gd_lib = false; // GD library is enabled/installed or not

        /**
         * Get all meta data for the module
         * @return array
         */
        public static function getModuleInfo(): array
        {
            return [
                'title' => 'FrontendForms',
                'summary' => 'Create forms and validate them using the Valitron library.',
                'author' => "Jürgen Kern",
                'href' => 'https://github.com/juergenweb/FrontendForms',
                'version' => '2.2.30',
                'singular' => true,
                'autoload' => true,
                'requires' => ['PHP>=8.0.0', 'ProcessWire>=3.0.181']
            ];
        }

        /**
         * Set default values for configuration fields
         * These values will be stored in the DB during the installation process
         * This is necessary to get them via getModuleConfig() without saving the configuration page after the
         * installation If the values are not stored inside the DB, they are not reachable via getModuleConfig();
         * return array
         */
        public static function getDefaultData(): array
        {
            return [
                'input_showasterisk' => 1,
                'input_requiredHintPosition' => 'top',
                'input_wrappers' => ['inputwrapper', 'fieldwrapper'],
                'input_wrapperFormElements' => 0,
                'input_wrapperFormElementsCSSClass' => '',
                'input_removeJS' => 0,
                'input_removeCSS' => 0,
                'input_framework' => 'none.json',
                'input_customframeworkpath' => '',
                'input_descPosition' => 'afterInput',
                'input_appendLabel' => [],
                'input_ajaxformsubmission' => 0,
                'input_hideProgressBar' => 0,
                'input_emailTemplate' => 'template_1.html',
                'input_dateformat' => 'Y-m-d',
                'input_timeformat' => 'H:i a',
                'input_privacy' => '',
                'input_privacypageselect' => 'int',
                'input_maxAttempts' => 5,
                'input_minTime' => 5,
                'input_maxTime' => 3600,
                'input_useHoneypot' => 1,
                'input_logFailedAttempts' => 0,
                'input_useIPBan' => 1,
                'input_preventIPs' => '',
                'input_requiredText' => '',
                'input_alertSuccessText' => '',
                'input_alertErrorText' => '',
                'input_captchaType' => 'none',
                'input_captchaCharset' => 'abcdefghijklmnpqrstuvwxyz123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ',
                'input_captchaHeight' => 50,
                'input_captchaWidth' => 150,
                'input_offset' => 5,
                'input_question' => '',
                'input_answers' => '',
                'input_bgcolorchooser' => 'custom',
                'input_bgnumberOfColors' => 5,
                'input_bgCustomColors' => '#ddd',
                'input_captchaTextColor' => '#666',
                'input_captchaFontsize' => 20,
                'input_captchaFontFamily' => '',
                'input_captchaNumberOfLines' => '10',
                'input_colorchooser' => 'random',
                'input_captchaLinesColor' => '#fff',
                'input_numberOfColorsOfLines' => 1,
                'input_captchaNumberOfCharacters' => 4,
                'input_charactersOffLine' => 0,
                'input_blurlevel' => 0,
                'input_pixelatelevel' => 0,
                'input_grayscale' => 0,
                'input_blacklist' => '',
                'toppasswords_download' => '',
                'last_check' => '',
                'github_modified' => '',
                'input_html5_validation' => 0,
                'input_global_label_tag' => '',
                'input_global_desc_tag' => '',
                'input_global_notes_tag' => '',
                'input_global_msg_tag' => ''
            ];
        }

        /**
         * @throws WireException
         */
        public function __construct()
        {

            parent::__construct();

            // check if the GD library is installed
            $this->gd_lib = function_exists('gd_info');
            if (!$this->gd_lib) {
                $this->warning($this->_('GD library is not installed/enabled. Please install/enable it to be able to use CAPTCHA images.'));
            }

            // add the appropriate values to properties, so you can get them everywhere inside the class
            $this->modulePath = $this->wire('config')->paths->siteModules . 'FrontendForms/'; // set the relative path to this module
            $this->customFrameworksPath = $this->wire('config')->paths->assets . 'files/FrontendForms/frameworks/';
            $this->moduleConfig = $this->wire('modules')->getConfig($this);
            $this->imagePath = $this->modulePath . 'captchaimages/'; // path to the images for the CAPTCHA
            $this->passwordPath = $this->modulePath . 'passwords.txt'; // path to password.txt file
            $this->emailTemplatesPath = $this->modulePath . 'email_templates';//  set the path to the email templates folder
            $this->custom_emailTemplatesPath = $this->wire('config')->paths->site . 'frontendforms-custom-templates'; //  set the path to the custom email templates folder
            $this->temp_uploadPath = $this->modulePath . 'temp_uploads/';// set the path to the temporary folder for mail attachments

            //  create and set a property of each configuration setting from DB
            foreach ($this->moduleConfig as $key => $value) {
                $this->$key = $value;
            }

            // array of all passwords in the blacklist
            if ($this->input_blacklist) {
                $this->blacklist = explode("\n", $this->input_blacklist);
            }

            // create a numeric array of all available email templates inside the email folder
            $this->setEmailTemplates();

            self::$framework = str_replace('.json', '', $this->input_framework);

            // set the default custom framework path
            if (array_key_exists('input_customframeworkpath', $this->moduleConfig) && ($this->moduleConfig['input_customframeworkpath'])) {
                $cp = $this->wire('config')->paths->root . $this->moduleConfig['input_customframeworkpath'];
                // add trailing slash at the end if it is missing
                if (substr($cp, -1) != '/') {
                    $cp = $cp . '/';
                }
                $this->customFrameworksPath = $cp;
            }

            //get all classes from the currently loaded framework from the folder CSSClasses
            $this->defaultClasses = json_decode(file_get_contents(self::getCSSClassFile($this->input_framework, $this->customFrameworksPath)));

        }

        public function createEmailTemplatesOptions(InputfieldSelect $select, bool $inherit = false)
        {

            //  create options
            $placeholderimage = $this->wire('config')->urls->$this . 'images/templatepreviews/emailtemplate-placeholder-image.png';
            $noneimage = $this->wire('config')->urls->$this . 'images/templatepreviews/none.png';

            if ($inherit) {
                if ($this->input_emailTemplate == 'none') {
                    $inheritImage = $noneimage;
                } else {
                    $inheritImage = $placeholderimage;
                }
            }

            $select->addOption('none', $this->_('no HTML template'), ['data-img-src' => $noneimage]);

            foreach ($this->emailTemplates as $template) {

                $p = pathinfo($this->email_template_files[$template]);
                $absolutedir = $p['dirname'];
                $relativedir = strstr($p['dirname'], '/site/modules');
                $filename = $p['filename'] . '.png';
                $previewImage = $relativedir . '/' . $filename;
                $previewPath = $absolutedir . '/' . $filename;

                if (file_exists($previewPath)) {
                    $path = $previewImage;
                } else {
                    $path = $placeholderimage;
                }

                if ($inherit) {
                    if ($this->input_emailTemplate == $template) {
                        $inheritImage = $path;
                    }
                }

                // add data-img-src for the image picker
                $select->addOption($template, $template, ['data-img-src' => $path]);
            }

            if ($inherit) {
                $select->addOption('inherit', $this->_('Inherit from FrontendForms') . '<div class="ff-email-template-selected">(' . $this->input_emailTemplate . ')</div>', ['data-img-src' => $inheritImage]);
                // re-order the array
                $allOptions = $select->getOptions();
                $newArray = array_merge(array_splice($allOptions, -1), $allOptions);
                $select->setOptions($newArray);
            }

        }

        /**
         * Create the folder for custom frameworks classes file if it does not exist
         * @return void
         * @throws \ProcessWire\WireException
         */
        protected function createCustomFrameworksFolder(): void
        {
            // check if custom framework folder exists, otherwise create it
            if (!$this->wire('files')->exists($this->customFrameworksPath)) {
                $this->wire('files')->mkdir($this->customFrameworksPath);
            }
        }

        /**
         * Get the path of the CSS file for the given framework
         * @param string $framework
         * @param string $customFrameworksPath
         * @return string
         * @throws \ProcessWire\WireException
         */
        public static function getCSSClassFile(string $framework, string $customFrameworksPath): string
        {
            $modulePath = wire('config')->paths->siteModules . 'FrontendForms' . DIRECTORY_SEPARATOR;
            if (wire('files')->exists($modulePath . 'CSSClasses' . DIRECTORY_SEPARATOR . $framework)) {
                return $modulePath . 'CSSClasses' . DIRECTORY_SEPARATOR . $framework;
            } else if (wire('files')->exists($customFrameworksPath . $framework)) {
                return $customFrameworksPath . $framework;
            }
            // load none.json file as fallback
            return $modulePath . 'CSSClasses' . DIRECTORY_SEPARATOR . 'none.json';
        }

        public static function createMailModuleOptions(Modules $modules): array
        {
            $list = [];
            $list['none'] = __('None'); // default

            foreach (FrontendForms::SUPPORTEDMAILMODULES as $className) {
                if ($modules->getModuleID($className))
                    $list[$className] = $className;
            }

            // combine WireMailPostmark and WireMailPostmarkApp if both are installed
            $postmark = array_filter($list, function ($key) {
                return strpos($key, 'WireMailPostmark') === 0;
            }, ARRAY_FILTER_USE_KEY);
            if (count($postmark) > 1) {
                foreach ($postmark as $k => $v) {
                    unset($list[$k]);
                }
                $list['WireMailPostmark'] = implode('/', $postmark);
            }
            return $list;
        }

        /**
         * Get the total number of installed 3rd party mail modules, which can be used with FrontendForms
         * @param \ProcessWire\Modules $modules
         * @return int
         */
        public static function getNumberOfMailModules(Modules $modules): int
        {
            $number = [];
            foreach (FrontendForms::SUPPORTEDMAILMODULES as $className) {
                if ($modules->getModuleID($className))
                    $number[] = $className;
            }
            return count($number);
        }


        /**
         * Create an InputfieldSelect for choosing a custom mail module
         * Internal method for modules, which are based on FrontendForms
         * @param \ProcessWire\Modules $modules
         * @param \ProcessWire\Module $module
         * @return \ProcessWire\InputfieldSelect
         * @throws \ProcessWire\WirePermissionException
         */
        public static function createMailModuleInputfield(Modules $modules, Module $module): InputfieldSelect
        {

            // select if you want to use a custom mail module for sending mails or not
            $mailModuleSelect = $modules->get('InputfieldSelect');
            $mailModuleSelect->label = __('Use Custom mail module');
            $mailModuleSelect->attr('name', 'input_mailmodule');
            $mailModuleSelect->addOptions(FrontendForms::createMailModuleOptions($modules));
            $mailModuleSelect->attr('value', $module->input_mailmodule);
            $mailModuleSelect->required = 1;
            $mailModuleSelect->description = __('Select your preferred module for sending mails.');
            $mailModuleSelect->notes = __('By default, all mails will be sent with WireMail, but you can select a custom module from this field for sending mails too.');
            return $mailModuleSelect;
        }


        /**
         * Get the response of a GitHub repository page by a given url
         * @param string $url
         * @return mixed - returns the JSON object
         * @throws WireException
         * @throws WireException
         */
        protected function getDataFromGitHub(string $url): mixed
        {
            // add header for GitHub request to do not get a 403 response
            // Please note: GitHub only supports a certain number of requests from the same IP
            // If the maximum of requests is reached a 403 header will be displayed
            $opts = [
                'http' => [
                    'method' => 'GET',
                    'header' => [
                        'User-Agent: PHP'
                    ]
                ]
            ];
            $response = false; // set response to false by default
            // fetch the response from the given url
            $context = stream_context_create($opts);
            $file = file_get_contents($url, false, $context);

            if ($file) {
                $response = json_decode($file); // contains all the response data as a JSON object
            } else {
                // there was an error getting the file - write an error log

                $this->wire('log')->error(E_WARNING);
                // inform the user with a warning message
                $this->wire('session')->warning($this->_('Sorry, but the file including the password list could not be downloaded from GitHub.'));
            }
            return $response;
        }

        /**
         * Method to set multi-language value to a multi-language configuration field
         * @param string $inputfield_name
         * @param object $fieldObject
         * @return void
         * @throws WireException
         */
        protected function setLanguageValue(string $inputfield_name, object $fieldObject): void
        {

            $languages = $this->wire('languages');
            if ($languages) { // check if multi-lang site
                $fieldObject->useLanguages = true;
                foreach ($languages as $language) {
                    if ($language->isDefault()) {
                        $fieldObject->set('value', (string)$this->get($inputfield_name));
                    } else {
                        $fieldObject->set("value$language", (string)$this->get($inputfield_name . '__' . $language->id));
                    }
                }
            }
        }

        /**
         * Method to add an email template to the WireMail class
         * Will be used with the mailTemplate method from the WireMail class
         * @param WireMail $mail - the mail object of the WireMail class
         * @param string $templateName - the name of the template that should be used to render the email
         * @return WireMail
         * @throws Exception
         */
        protected function setEmailTemplate(WireMail $mail, string $templateName): WireMail
        {
            /*
             * This is only for modules, which are based on the FrontendForms module
             * because they can inherit from this module
             */
            if ($templateName === 'inherit') {
                $templateName = $this->input_emailTemplate; //  use the template from the FrontendForms config
            } else {

                $customPath = false;
                if (Form::checkForPath($templateName)) {
                    $customPath = true;
                    $path_parts = pathinfo($templateName);
                    if (!file_exists($path_parts['dirname'])) {
                        throw new Exception(sprintf('The directory that should contain your email template under the given path %s/ does not exist. Please check your path once more.', $path_parts['dirname']));
                    }
                    $this->emailTemplates = $this->wire('files')->find($path_parts['dirname'], ['extensions' => 'html']);
                } else {
                    $this->setEmailTemplates();
                }

                if (!in_array($templateName, $this->emailTemplates)) {
                    //  check if an email template with this name exists
                    $msg = sprintf('Email template with the name %s does not exist. Possible templates are: %s',
                        $templateName, implode(', ', $this->emailTemplates));
                    if ($customPath) {
                        $msg = sprintf('Email template under the given path %s does not exist. Possible templates are: %s',
                            $templateName, implode(', ', $this->emailTemplates));
                    }
                    throw new Exception($msg);
                }

            }
            // add a new property to the mail class
            $mail->email_template = $templateName;
            return $mail;
        }

        /**
         * Add or remove a specific IP value from the input_preventIPs db field and return the string afterwards
         * @param bool $add
         * @throws WireException
         */
        protected function addRemoveIpFromBanList(bool $add): void
        {
            //create an array of string
            $ipAddresses = explode("\n", $this->moduleConfig['input_preventIPs']);
            if ($add) {
                // add the value to $ipAddresses
                $ipAddresses[] = $_POST['submit_save_ip'];
            } else {
                // remove the value from $ipAddresses
                $key = array_search($_POST['submit_remove_ip'], $ipAddresses, true);
                if ($key !== false) {
                    unset($ipAddresses[$key]);
                }
            }
            // convert it back to a string and save it to the module configuration
            $data = $this->moduleConfig;
            $data['input_preventIPs'] = implode("\n", array_unique($ipAddresses));
            $this->input_preventIPs = $data['input_preventIPs']; // show the values inside the inputfield
            $this->wire('modules')->saveConfig($this, $data);
        }

        /**
         * Grab a txt file by its path and return an array of all values in it
         * @param string $path
         * @return array
         */
        protected function createArrayOfTxtFile(string $path): array
        {
            $listArray = [];
            // convert txt values to array
            $fp = @fopen($path, 'r');
            // Add each line to an array
            if ($fp) {
                $listArray = explode("\n", fread($fp, filesize($this->passwordPath)));
            }
            return $listArray;
        }

        /**
         * Grab all email template files inside the email template folder
         * Create an array of all email template names without an extension
         * @return void
         * @throws WireException
         */
        protected function setEmailTemplates(): void
        {
            $custom_templateFiles = $this->wire('files')->find($this->custom_emailTemplatesPath, ['extensions' => 'html']);
            $templateFiles = $this->wire('files')->find($this->emailTemplatesPath, ['extensions' => 'html']);
            $files = array_merge($custom_templateFiles, $templateFiles);

            $fileNames = $pathes_to_files = [];
            foreach ($files as $file) {
                $pathes_to_files[pathinfo($file, PATHINFO_BASENAME)] = $file;
                $fileNames[] = pathinfo($file, PATHINFO_BASENAME);
            }
            $this->email_template_files = $pathes_to_files;
            $this->emailTemplates = $fileNames; // set it to property emailTemplates
        }

        /**
         * Get the names of all email templates inside the email_templates folder without the file extension (only
         * names)
         * @return array - a numeric array of email template names
         */
        protected function getEmailTemplates(): array
        {
            return $this->emailTemplates;
        }

        /**
         * Get the language code (fe de, en,...)
         * @return string
         */
        protected function getLang(): string
        {
            return $this->lang;
        }

        /**
         * Set the language as language code (fe en, de,…)
         * Please take a look inside the lang folder which languages are available (the name of the folder is the
         * language code)
         * @param string $lang
         * @return void
         */
        public function setLang(string $lang): void
        {
            $this->lang = trim($lang);
            $this->Validator::lang($this->lang);
        }

        /**
         * Get the name of the site profile installed by extracting the readme file inside the templates' folder
         * Created for future usage in modules based on this module
         * If pages were created by a module - the markup could be adapted to the site profile installed
         * @return string
         * @throws WireException
         */
        public static function getSiteProfileName(): string
        {
            // grab the readme file if present
            $self = new self();
            $readme = $self->wire('files')->fileGetContents($self->wire('config')->paths->templates . '/readme.txt');
            if ($readme) {
                //find and extract the link
                preg_match_all('!https?://\S+!', $readme, $matches);
                return basename($matches[0][0]) . '.txt';
            } else {
                return 'default.txt';
            }
        }

        /**
         * Ready method contains all Hooks to extend the WireMail class
         * These Hooks need to be inside ready(), do not work inside init()
         * @return void
         */
        public function ready(): void
        {

            /**
             * Add a new method "sendAttachments($form)" to the WireMail class
             * This method is an extension of the WireMail attachment() method
             * It takes the files from the given upload folder and send it with the email
             * Afterwards the files will be removed/moved or will be kept inside the given folder
             * Usage: $mail->sendAttachments();
             * $mail is the WireMail object
             */
            wire()->addHookMethod('WireMail::sendAttachments', function ($event) {

                $mail = $event->object;
                $form = $event->arguments(0);


                // check if temp_uploads folder exists - otherwise create it
                if (!$this->wire('files')->exists($this->temp_uploadPath)) {
                    $this->wire('files')->mkdir($this->temp_uploadPath);
                }

                $keep_files = ($event->arguments(1)) ? ($event->arguments(1)) : false;

                // get the paths of the currently uploaded files
                $fileNames = $form->getUploadedFiles();
                if ($fileNames) {
                    foreach ($fileNames as $path) {
                        // move the files to the tmp folder
                        $file_name = pathinfo($path, PATHINFO_BASENAME);
                        $this->wire('files')->copy($path, $this->temp_uploadPath);
                        if ($mail->className() === 'WireMailPHPMailer') {
                            $mail->addAttachment($this->temp_uploadPath . $file_name);
                        } else {
                            $mail->attachment($this->temp_uploadPath . $file_name);
                        }
                        // save the file in addition under the upload path
                        if ($keep_files) {
                            $this->wire('files')->copy($this->temp_uploadPath, $form->getUploadPath());
                        } else {
                            $this->wire('files')->unlink($path);
                        }
                    }
                }
                $event->return = $mail;
                return $mail;
            });

            /**
             * Additional Hook method use/change the email template that should be used for sending emails
             * Add the name of the file including the extension as parameter inside the parenthesis
             * Usage: $mail->mailTemplate('template_1.html');
             */
            wire()->addHookMethod('WireMail::mailTemplate', function ($event) {
                $mail = $event->object;
                $mail->email_template = 'none';
                $template = $event->arguments(0);
                //  run only if a template was selected
                if ($template != 'none') {
                    // check if template exists and set it to $mail->email_template property
                    $this->setEmailTemplate($mail, $template);
                }
                $event->return = $mail;
                return $mail;
            });

            /**
             * add the new property "title" to WireMailClass
             * This can be used as additional information under the subject
             * $mail->title = 'My title'
             */
            wire()->addHookMethod('WireMail::title', function ($event) {
                $mail = $event->object;
                $title = $event->arguments(0);
                $mail['title'] = trim((string)$title);
                $event->return = $mail;
                return $mail;
            });


            /**
             * Add the FrontendComments field to an extra tab if FrontendComments field exists
             */
            wire()->addHookAfter('ProcessPageEdit::buildForm', function ($event) {

                // First check if FrontendComments fields exist
                $commentfields = $this->wire('fields')->findByType('FieldtypeFrontendComments');
                if (!$commentfields) return;

                // make sure we're editing a page and not a user
                if ($event->process != 'ProcessPageEdit') return;

                $page = $event->object->getPage();

                // get all fields of the type FrontendComments on this page
                $pageCommentFields = [];
                foreach ($commentfields as $f) {
                    if ($page->hasField($f->name)) {
                        $pageCommentFields[] = $f->name;
                    }
                }

                if (!$pageCommentFields) return; // no field of this type found

                $form = $event->return;

                $inputfields = new InputfieldWrapper();
                $inputfields->attr('title', $this->_('Comments'));
                $inputfields->attr('name+id', 'pagecommentstab'); // we need both unique ID and Name

                $pageEditTab = $form->find('id=ProcessPageEditContent')->first();
                $form->insertAfter($inputfields, $pageEditTab);

                // inserting in the right place is not enough to set the tab order
                // we need the following hook
                wire()->addHookAfter('ProcessPageEdit::getTabs', function ($event) {
                    $event->return = array_merge(
                        array_slice($event->return, 0, 1, true),
                        array('pagecommentstab' => __('Comments')), // should be identical to the weird name/title above
                        array_slice($event->return, 1, null, true)
                    );
                });

                // move comment fields from the content tab to the newly created comments tab
                $contentTab = $form->children->get('id=ProcessPageEditContent');
                $commentsTab = $form->children->get('id=pagecommentstab');
                foreach ($pageCommentFields as $fieldName) {
                    $commentField = $contentTab->get($fieldName);
                    $contentTab->remove($fieldName);
                    $commentsTab->prepend($commentField);
                }

                $event->return = $form;

            });

        }


        /**
         * @throws WireException
         * Init method contains a lot of HOOK methods
         */
        public function init(): void
        {

            // Require the classloaders
            wire('classLoader')->addNamespace('Valitron', __DIR__ . '/valitron/src');
            wire('classLoader')->addNamespace('FrontendForms', __DIR__ . '/Formelements');
            wire('classLoader')->addNamespace('FrontendForms', __DIR__ . '/Formelements/Textelements');
            wire('classLoader')->addNamespace('FrontendForms', __DIR__ . '/Formelements/Textelements/Defaults');
            wire('classLoader')->addNamespace('FrontendForms', __DIR__ . '/Formelements/Inputelements');
            wire('classLoader')->addNamespace('FrontendForms', __DIR__ . '/Formelements/Miscellaneous');
            wire('classLoader')->addNamespace('FrontendForms', __DIR__ . '/Formelements/Miscellaneous/defaults');
            wire('classLoader')->addNamespace('FrontendForms', __DIR__ . '/Formelements/Wrapper');
            wire('classLoader')->addNamespace('FrontendForms', __DIR__ . '/Formelements/Captcha');
            wire('classLoader')->addNamespace('FrontendForms', __DIR__ . '/Formelements/Captcha/variants');
            wire('classLoader')->addNamespace('FrontendForms', __DIR__ . '/Formelements/Images');
            wire('classLoader')->addNamespace('FrontendForms', __DIR__ . '/Formelements/Inputelements/Datalist');
            wire('classLoader')->addNamespace('FrontendForms', __DIR__ . '/Formelements/Inputelements/Inputs');
            wire('classLoader')->addNamespace('FrontendForms', __DIR__ . '/Formelements/Inputelements/Inputs/defaults');
            wire('classLoader')->addNamespace('FrontendForms', __DIR__ . '/Formelements/Inputelements/Select');
            wire('classLoader')->addNamespace('FrontendForms', __DIR__ . '/Formelements/Inputelements/Select/defaults');
            wire('classLoader')->addNamespace('FrontendForms', __DIR__ . '/Formelements/Inputelements/Textarea');
            wire('classLoader')->addNamespace('FrontendForms', __DIR__ . '/Formelements/Inputelements/Textarea/defaults');
            wire('classLoader')->addNamespace('FrontendForms', __DIR__ . '/avatar');


            //create instance of InputfieldPassword and set the requirement settings from field "pass" to it
            $this->password_field = $this->wire('fields')->get('pass');
            $this->password_object = new InputfieldPassword();
            if (!$this->password_field->requirements) // the password field was not saved till now, so requirements are not stored
            {
                $this->password_field->requirements = ['letter', 'digit'];
            }

            $this->password_object->requirements = $this->password_field->requirements;
            $this->default_dateformat = $this->wire('config')->dateFormat;
            $this->passwordList = $this->createArrayOfTxtFile($this->passwordPath);

            // check if LanguageSupport module is installed
            if ($this->wire('modules')->isInstalled('LanguageSupport')) {
                //set language id inside a session variable for later usage in url hook
                $this->wire('session')->set('userlang', $this->wire('user')->language->id);
            }

            /**
             * Hooks for validation and sanitization of configuration values in the backend
             */
            $this->addHookBefore('InputfieldTextarea::processInput', $this, 'validateIP');
            $this->addHookBefore('InputfieldTextarea::processInput', $this, 'validateColorCodeTextarea');
            $this->addHookBefore('InputfieldText::processInput', $this, 'sanitizeColorValues');
            $this->addHookBefore('Inputfield::render', $this, 'addLinkToNotes');
            $this->addHookBefore('Page::render', $this, 'downloadPasswords');
            $this->addHookAfter('Page::render', $this, 'initializeImagePicker');


            // add CSS and JS to the backend
            $version = $this->getModuleInfo()['version'] . '-' . time();
            $this->wire('config')->styles->add($this->wire('config')->urls->{$this->className} . 'backend/frontendforms.css?v=' . $version . '&time=' . time());
            $this->wire('config')->scripts->add($this->wire('config')->urls->{$this->className} . 'backend/frontendforms.js?v=' . $version . '&time=' . time());

            // add image picker js and CSS files to the backend (used for the email template select)
            $this->wire('config')->styles->add($this->wire('config')->urls->{$this->className} . 'image-picker/image-picker.css?v=' . $version);
            $this->wire('config')->scripts->add($this->wire('config')->urls->{$this->className} . 'image-picker/image-picker.min.js?v=' . $version);

            // add CSS and JS links to the frontend template
            $this->addHookAfter('Page::render', $this, 'addAssets', ['priority' => 999]);
            // hooks after inputfield integer render
            $this->addHookAfter('InputfieldInteger::render', $this, 'inputfieldIntegerRenderAfter');
            // outputs examples how to overwrite global settings
            $this->addHookAfter('Inputfield::render', $this, 'overwriteExamplesNotes');
            $this->addHookBefore('WireMail::send', $this, 'convertMailProperties');
            // remove uploaded attachments after successful sending
            $this->addHookAfter('WireMail::send', $this, 'deleteUploadedFilesAfterSending');
            // if an image captcha is selected than set the height of the image to 2/3 of the width
            $this->addHookBefore('Modules::saveConfig', $this, 'setImageHeight');
            // if an image captcha is selected than set the height of the image to 2/3 of the width
            $this->addHookBefore('Modules::saveConfig', $this, 'cleanUpBlacklist');
            // if the pass config field is saved update the blacklist
            $this->addHookAfter('Fields::saved', $this, 'updateBlacklist');

            // Hook for replacing form placeholders inside CKEditor fields
            $this->addHookAfter('Page::render', $this, 'replaceFormPlaceholders');

            // Hook for checking if update button was pressed by analyzing Post values
            $this->addHookBefore('Page::render', $this, 'blacklistButtonSubmit');
            // Hook to check if a button to add an IP to the IP blacklist was submitted
            $this->addHookBefore('Page::render', $this, 'saveIPButtonSubmit');
            // Hook to check if a button to remove an IP from the IP blacklist was submitted
            $this->addHookBefore('Page::render', $this, 'removeIPButtonSubmit');
            // Hook to find all Font files
            $this->addHookBefore('Page::render', $this, 'findFontFiles');

            // Show details about the blocked IP address inside a panel
            $this->wire->addHook('/detail-view/{ip}', function () { // event variable is necessary
                if ($this->wire('modules')->isInstalled('LanguageSupport')) {
                    // grab current user lang from session
                    $this->wire('user')->language = $this->wire('session')->get('userlang');
                }
                $out = '';
                // load the detail-view template file
                include_once('detail-view.php');
                return $out;
            });
        }

        /**
         * Set the height of the image to 2/3 of the width if an image CAPTCHA was selected
         * This is necessary because the images are in 3/2 format
         * @param HookEvent $event
         * @return void
         */
        protected function setImageHeight(HookEvent $event): void
        {
            $data = $event->arguments(1);
            if (isset($data['input_captchaType']) && $data['input_captchaType'] === 'DefaultImageCaptcha') {
                $data['input_captchaHeight'] = (int)($data['input_captchaWidth'] * 2 / 3);
            }
            $event->arguments(1, $data);
        }

        /**
         * Add values from the top 100 passwords which fulfill the password requirements to the blacklist
         * Parameter "overwrite" is only there for future purposes, at the moment it is not used
         * @param bool $overwrite
         * @return string - the list of the passwords as a string separated by \n
         * @throws WireException
         */
        protected function addPopularPasswords(bool $overwrite = false): string
        {
            //grab current blacklist data
            if ($overwrite) {
                // old data will be deleted and only the values from the list of the top 100 will be used
                $blacklist = implode("\n", $this->passwordList);
            } else {
                // merge blacklist from the db and the password list from passwords.txt
                $blacklist = array_unique(array_merge($this->blacklist, $this->passwordList), SORT_REGULAR);
            }
            // save the list
            $data = $this->moduleConfig;
            $data['input_blacklist'] = $this->cleanUpPasswordList($blacklist);
            // save the current date and time of the list update
            $data['last_check'] = $this->wire('datetime')->date($this->default_dateformat);
            $this->wire('modules')->saveConfig($this, $data);
            //$this->blacklist = $data['input_blacklist'];
            return $data['input_blacklist'];
        }

        /**
         * Takes a list of passwords from a textarea separated by \n and removes all passwords that
         * do not fulfill the requirements
         * @param string|array $data
         * @return string
         */
        protected function cleanUpPasswordList(string|array $data): string
        {
            if (is_string($data)) {
                $data = explode("\n", $data);
            }
            //filter out empty array values if present
            $passwords = array_filter(($data));
            foreach ($passwords as $key => $password) {
                $password = str_replace(['.', ' ', "\n", "\t", "\r"], '', $password);
                if (!$this->password_object->isValidPassword($password)) {
                    unset($passwords[$key]);
                }
            }
            // let us remove double entries if present
            $passwords = array_unique($passwords);
            $this->password_object->getErrors(true); // suppress error messages in backend
            // convert it back to a string
            return implode("\n", $passwords);
        }

        /**
         * Remove all forbidden passwords, which do not fulfill the requirements of passwords as set in the config
         * The goal is to keep the password list as short as possible
         * Passwords which do not fulfill the requirements do not need to check against the blacklist
         * BTW all duplicates (if present) will also be removed
         * @param HookEvent $event
         * @return void
         */
        protected function cleanUpBlacklist(HookEvent $event): void
        {
            $class = $event->arguments(0);
            $data = $event->arguments(1);
            // run only on FrontendForms module
            if ($class == 'FrontendForms') {
                if (!is_null($data['input_blacklist'])) {
                    $data['input_blacklist'] = $this->cleanUpPasswordList($data['input_blacklist']);
                }
            }
            $event->arguments(1, $data);
        }

        /**
         * Hook method to add passwords from the passwords.txt file to the blacklist if
         * the update blacklist button was submitted manually
         * @return void
         * @throws WireException
         */
        protected function blacklistButtonSubmit(): void
        {
            // check if blacklist update button was submitted
            if ($this->wire('input')->post->submit_save_passwordblacklist) {
                $this->input_blacklist = $this->addPopularPasswords();
                $this->wire->message($this->_('The password blacklist has been updated manually.'));
            }
        }

        /**
         * Check if a save button for adding IP address to the blacklist was submitted
         * If yes, then save this IP address to the blacklist of banned IP addresses
         * @return void
         * @throws WireException
         */
        protected function saveIPButtonSubmit(): void
        {
            // check if a save ip to blacklist button was submitted
            if ($this->wire('input')->post->submit_save_ip) {
                $this->addRemoveIpFromBanList(true);
                $this->wire->message(sprintf($this->_('The IP address %s was added to the IP blacklist.'),
                    $this->wire('input')->post->submit_save_ip));
            }
        }

        /**
         * Check if a save button for removing an IP address from the blacklist was submitted
         * If yes, this IP address will be removed from the blacklist of banned IP addresses
         * @return void
         * @throws WireException
         */
        protected function removeIPButtonSubmit(): void
        {
            // check if a save ip to blacklist button was submitted
            if ($this->wire('input')->post->submit_remove_ip) {
                $this->addRemoveIpFromBanList(false);
                $this->wire->message(sprintf($this->_('The IP address %s was removed from the IP blacklist.'),
                    $this->wire('input')->post->submit_remove_ip));
            }
        }

        /**
         * Find all ttf fonts across the whole site and save the names and paths to the input_captcha_fonts property
         * @return void
         * @throws WireException
         */
        protected function findFontFiles(): void
        {
            if ($this->wire('input')->post->input_submit_refreshFonts_frontendforms) {
                $data = $this->moduleConfig;
                $data['input_captchaFonts'] = $this->findAllFontfiles();
                $this->input_captchaFonts = $data['input_captchaFonts'];
                $this->wire('modules')->saveConfig($this, $data);
            }
        }

        /**
         * Update blacklist if field pass was saved
         * @param HookEvent $event
         * @return void
         * @throws WireException
         */
        protected function updateBlacklist(HookEvent $event): void
        {
            $field = $event->arguments(0);
            if ($field->name == 'pass') {
                //set the requirements
                $this->password_object = new InputfieldPassword();
                $this->password_object->requirements = $field->requirements;
                $this->addPopularPasswords();
                $this->wire('session')->message($this->_('Blacklist of passwords from the module FrontendForms was updated'));
            }
        }

        /**
         * Sanitize textarea that there is only on item in one line and return the cleaned array
         * @param string|null $value
         * @return array
         */
        protected function sanitizeMultilineTextarea(string|null $value): array
        {
            if ($value != null) {
                // create an array of string with separator \n
                $items = explode("\n", $value);
                $value = [];
                foreach ($items as $item) {
                    $value[] = trim(explode(" ", $item)[0]);
                }
                return $value;
            }
            return [];
        }

        /**
         * Sanitize and validate all IP addresses to be unique inside the textarea input_preventIPs
         * @param HookEvent $event
         * @return void
         */
        protected function validateIP(HookEvent $event): void
        {
            if ($event->object->name == 'input_preventIPs') {
                $value = $event->arguments(0);
                // sanitize all values first
                $dataArray = $this->sanitizeMultilineTextarea($value[$event->object->name]);
                //validate if all array items contain a valid IP address
                foreach ($dataArray as $key => $ip) {
                    if (!filter_var($ip, FILTER_VALIDATE_IP)) {
                        $this->wire->error(sprintf($this->_('%s is not a valid IP address and has therefore been deleted.'),
                            $ip));
                        unset($dataArray[$key]);
                    }
                }
                // convert it back to string separated by \n
                $dataArray = implode("\n", array_unique($dataArray));
                $value->input_preventIPs = $dataArray;
                $event->arguments(0, $value);
            }
        }

        /**
         * Validate, if value is a valid HEX color code
         * @param HookEvent $event
         * @return void
         */
        protected function validateColorCodeTextarea(HookEvent $event): void
        {
            $inputfields = ['input_captchaLinesColor', 'input_bgCustomColors'];
            $fieldname = $event->object->name;
            if (in_array($fieldname, $inputfields)) {
                $value = $event->arguments(0);
                if ($value != null) {
                    // sanitize all values first
                    $dataArray = $this->sanitizeMultilineTextarea($value[$event->object->name]);
                    //validate if all array items contain a valid HEX code
                    foreach ($dataArray as $key => $item) {
                        if (!self::checkHex($item)) {
                            $this->wire->error(sprintf($this->_('%s is not a valid color code and has therefore been deleted.'),
                                $item));
                            unset($dataArray[$key]);
                        }
                    }
                    // create string from an array again
                    $dataArray = implode("\n", $dataArray);
                    $value->{$fieldname} = $dataArray;
                    $event->arguments(0, $value);
                }
            }
        }

        /**
         * Check if the value is a valid HEX code
         * @param string $hex
         * @return bool
         */
        public static function checkHex(string $hex): bool
        {
            // Hash prefix is optional.
            $hex = ltrim($hex, '#');
            $length = strlen($hex);
            $valid = ($length === 3 || $length === 6);
            // Must be a valid hex value.
            return $valid && ctype_xdigit($hex);
        }

        /**
         * Sanitize all color values if they are valid HEX code
         * @param HookEvent $event
         * @return void
         */
        protected function sanitizeColorValues(HookEvent $event): void
        {
            $fieldNames = ['input_captchaTextColor'];
            $fields = $event->arguments(0);
            foreach ($fieldNames as $name) {
                $value = $fields->$name;
                if (($value) && !(self::checkHex($value))) {
                    $defaultColor = $this->getDefaultData()[$name];
                    $this->wire->error(sprintf($this->_('The color code %s does not correspond to a valid color code in HEX format and has therefore been reset to the default value %s.'),
                        $value, $defaultColor));
                    // set the color code back to the default value
                    $fields->$name = $defaultColor;
                    $event->arguments(0, $fields);
                }
            }
        }

        /**
         * Method to add HTML links to field notes
         * @param HookEvent $event
         * @return void
         */
        protected function addLinkToNotes(HookEvent $event): void
        {
            $field = $event->object;
            if (!in_array($field->name, ['input_dateformat', 'input_timeformat'])) {
                return;
            }
            $field->entityEncodeText = false;

            switch ($field->name) {
                case('input_dateformat'):
                    $notes = sprintf($this->_('Enter a date format in PHP dateformat syntax (fe Y-m-d). %s'),
                        '<a href="https://www.php.net/manual/en/datetime.format.php" target="_blank" title="Link opens in a new tab">Read more...</a><br>');
                    $field->notes = $notes . sprintf($this->_(' The default format is %s'), 'Y-m-d');
                    break;
                case('input_timeformat'):
                    $notes = sprintf($this->_('Enter a time format in PHP dateformat syntax (fe H:i:s). %s'),
                        '<a href="https://www.php.net/manual/en/datetime.format.php" target="_blank" title="Link opens in a new tab">Read more...</a><br>');
                    $field->notes = $notes . sprintf($this->_(' The default format is %s'), 'H:i a');
                    break;
            }
        }

        /**
         * Request GitHub, download the passwords.txt file and save it to the module root
         * @return bool - true if download was successful, otherwise false
         * @throws WireException
         */
        protected function downloadPasswordsFromGitHub(): bool
        {
            $filedata = $this->getDataFromGitHub(self::TOP_PASSWORDS); //load JSON data from the txt.file
            if ($filedata) {
                //get content of the file from GitHub
                $download_content = $this->wire('files')->fileGetContents($filedata->download_url);
                // create or overwrite existing file passwords.txt
                return (bool)($this->wire('files')->filePutContents($this->passwordPath, $download_content));
            }
            return false;
        }


        /**
         * Request GitHub once a month and download the top 100 passwords if file has been changed since the last
         * download To prevent downloading the whole list on every page request, the download will be taken only once
         * per month The download will be started only if the file passwords.txt does not exist inside or the file was
         * modified on GitHub
         * @return void
         * @throws WireException
         */
        protected function downloadPasswords(): void
        {
            $data = $this->wire('modules')->getConfig($this);
            // let us check some conditions if it is necessary to update the passwords
            if ($this->wire('files')->exists($this->passwordPath)) {

                // check if the last check was in the same month or not

                $check = $this->wire('datetime')->date('Y-m', $this->last_check) != $this->wire('datetime')->date('Y-m');
                if ($check) {

                    // save the check date to the database
                    $this->last_check = $data['last_check'] = $this->wire('datetime')->date($this->default_dateformat);
                    // grab data from GitHub
                    $github_data = $this->getDataFromGitHub(self::LAST_PASSWORDS_MODIFICATION_URL); //load JSON data from the file

                    if ($github_data) {
                        $last_update = $github_data[0]->commit->author->date; // last modification date on GitHub
                        // check if last download was before last update - so we need to download the file again
                        if ((!$this->toppasswords_download) || (strtotime($last_update) > strtotime($this->toppasswords_download))) {
                            // download the passwords from GitHub
                            if ($this->downloadPasswordsFromGitHub()) {
                                $this->toppasswords_download = $data['toppasswords_download'] = $this->wire('datetime')->date($this->default_dateformat);
                                //$this->github_modified = $data['github_modified'] = $this->wire('datetime')->date($this->default_dateformat);
                                $this->github_modified = $this->wire('datetime')->date($this->default_dateformat, $last_update);
                            }
                        }
                    }
                    wire('modules')->saveConfig($this, $data);
                }
            } else {
                // in the rare case that the file does not exist (fe accidentally deleted) - download it once more
                if ($this->downloadPasswordsFromGitHub()) {
                    $data['toppasswords_download'] = $this->wire('datetime')->date($this->default_dateformat);
                    wire('modules')->saveConfig($this, $data);
                }
            }
        }

        protected function initializeImagePicker(HookEvent $event): void
        {
            $page = $event->object;
            // don't add this to frontend pages
            if ($page->template->name !== 'admin') {
                return;
            }
            $initialize = '<script>$("select.ff-imagepicker").imagepicker({show_label  : true})</script>';
            $event->return = str_replace('</body>', $initialize . '</body>', $event->return);
        }

        /**
         * Method to delete all uploaded files after email was sent
         * @return void
         * @throws WireException
         */
        protected function deleteUploadedFilesAfterSending(): void
        {
            // all files were sent -> so empty the temp folders
            $files = $this->wire('files')->find($this->temp_uploadPath);
            foreach ($files as $file) {
                $this->wire('files')->unlink($file);
            }
        }

        /**
         * @param \ProcessWire\HookEvent $event
         * @return void
         */
        protected function convertMailProperties(HookEvent $event): void
        {
            $mail = $event->object;
            $className = $mail->className();

            if ($className === 'WireMailPHPMailer') {
                if ($mail['bodyHTML']) {
                    $mail->Body = $mail['bodyHTML'];
                }
            }
        }

        /**
         * Internal method to create additional texts under the notes
         * Consist of a default text, followed by the code example
         * @param array $methods
         * @return string
         */
        protected function createAdditionalNotesText(array $methods): string
        {
            // create singular/plural default text
            $text = $this->_n($this->_('This can be overwritten on the form by using this method'),
                $this->_('This can be overwritten on the form by using these methods'), count($methods));
            $methodsMarkup = [];
            foreach ($methods as $method) {
                $methodsMarkup[] = '<b>' . $method . '</b>';
            }
            $methodText = implode('<br>', $methodsMarkup);
            return '<pre>' . $text . ':<br>' . $methodText . '</pre>';
        }

        /**
         * Array that holds all examples on how to overwrite global setting on per form base
         * These examples will be displayed under the input fields in the module configuration
         * @param HookEvent $event
         * @return void
         */
        protected function overwriteExamplesNotes(HookEvent $event): void
        {
            $field = $event->object;
            $fields = [
                'input_minTime' => ['$form->setMinTime(3);'],
                'input_maxTime' => ['$form->setMaxTime(600);'],
                'input_maxAttempts' => ['$form->setMaxAttempts(4);'],
                'input_logFailedAttempts' => ['$form->logFailedAttempts(false); // true, false'],
                'input_requiredHintPosition' => ['$form->setRequiredTextPosition("bottom"); // top, bottom, none'],
                'input_requiredText' => ['$form->setRequiredText("This is my custom text");'],
                'input_alertSuccessText' => ['$form->setSuccessMsg("All is good");'],
                'input_alertErrorText' => ['$form->setErrorMsg("Something went wrong");'],
                'input_wrappers' => [
                    '$form->useInputWrapper(true); // true, false',
                    '$form->useFieldWrapper(false); // true, false'
                ],
                'input_wrapperFormElements' => ['$form->useFormElementsWrapper(true); // true, false'],
                'input_wrapperFormElementsCSSClass' => ['$form->getFormElementsWrapper()->removeAttribute("class")->setAttribute("class", "myClass");'],
                'input_appendLabel' => [
                    '$form->appendLabelOnCheckboxes(true); // true, false',
                    '$form->appendLabelOnRadios(true); // true, false'
                ],
                'input_descPosition' => [
                    '$form->setDescPosition("beforeLabel"); // beforeLabel, afterLabel, afterInput (overwrite on per form base)',
                    '$myField->setDescription("My field description")->setPosition("beforeLabel"); // beforeLabel, afterLabel, afterInput (overwrite on per field base)',
                ],
                'input_ajaxformsubmission' => ['$form->useAjax(true); // true, false'],
                'input_hideProgressBar' => ['$form->showProgressbar(true); // true, false'],
                'input_emailTemplate' => ['$mail->mailTemplate("template_2.html"); // has to be added to the WireMail object not to the form'],
                'input_useIPBan' => ['$form->useIPBan(false); // true, false',],
                'input_preventIPs' => [
                    '$form->useIPBan(false); // true, false',
                    '$form->testIPBan("146.70.36.200"); // ' . $this->_('Use this method to test, if IP ban works. Enter the IP address that should be tested.') . '<br>' .
                    $this->_('This method is only for testing purposes, so do not forget to remove it afterwards.')
                ],
                'input_useHoneypot' => ['$form->useHoneypot(true); // true,false'],
                'input_captchaType' => ['$form->disableCaptcha();'],
                'input_html5_validation' => ['$form->setHtml5Validation(true); // true,false'],
                'input_question' => ['$form->setSecurityQuestion("What color is green?", ["green", "color green", "it is green"]); // first parameter is the question'],
                'input_answers' => ['$form->setSecurityQuestion("What color is green?", ["green", "color green", "it is green"]); // second parameter are the answers'],
                'input_global_label_tag' => ['$form->setLabelTag("div");'],
                'input_global_desc_tag' => ['$form->setDescriptionTag("div");'],
                'input_global_notes_tag' => ['$form->setNotesTag("div");'],
                'input_global_msg_tag' => ['$form->setMessageTag("div");'],
                'input_removeCSS' => ['$form->useCSS(false); // true or false'],
                'input_removeJS' => ['$form->useJS(false); // true or false'],
            ];
            if (!array_key_exists($field->name, $fields)) {
                return;
            }
            $field->entityEncodeText = false;
            $field->notes .= $this->createAdditionalNotesText($fields[$field->name]);
        }

        /**
         * Add the module JavaScript and CSS file to the frontend
         * JS files will be added before the closing body tag
         * CSS files are added before the closing head tag
         * @param HookEvent $event
         * @return void
         * @throws WireException
         * @noinspection PhpUnused
         */
        protected function addAssets(HookEvent $event): void
        {
            $page = $event->object;
            // don't add this to the admin pages
            if ($page->template->name === 'admin') {
                return;
            }

            // add js variables as translatable strings to the head section if slider captcha is selected
            // inject them only if the page contains at least 1 form or the page is selected in the module config
            if (!is_null($page->ff_forms)) {
                if ($this->input_captchaType == 'SliderCaptcha' && $page->sliderCaptcha) {
                    $sliderdata = [
                        'barText' => $this->_('Slide right to fill'),
                        'loadingText' => $this->_('Loading'),
                        'failedText' => $this->_('Try again!'),
                        'offset' => $this->input_offset
                    ];
                    $script = '<script>var slidertexts = ' . json_encode($sliderdata) . ';</script>';

                    $event->return = str_replace('</head>', $script . '</head>', $event->return);
                }
            }

            $version = $this->getModuleInfo()['version'];
            if ((!is_null($page->ff_forms)) && (!$this->input_removeJS || $page->useJS)) {

                $js = '';
                // check if at field conditions are used inside this form, if so add the JavaScript file to the page
                if ($page->field_conditions) {
                    $js = '<script src="' . $this->wire('config')->urls->$this . 'mf-conditional-fields.min.js?v=' . $version . '"></script>' . PHP_EOL;
                }

                $js .= '<script src="' . $this->wire('config')->urls->$this . 'frontendforms.min.js?v=' . $version .'" defer></script>' . PHP_EOL;

                // load slidercaptcha.js only if this captcha type is selected
                if ($this->input_captchaType == 'SliderCaptcha' && $page->sliderCaptcha) {
                    $js .= '<script src="' . $this->wire('config')->urls->$this . 'frontendforms-slidercaptcha.min.js?v=' . $version . '" defer></script>' . PHP_EOL;
                }

                if (array_filter($page->useJS)) {
                    $event->return = str_replace('</body>', $js . PHP_EOL . '</body>', $event->return);
                }

            }

            if ((!is_null($page->ff_forms)) && (!$this->input_removeCSS || $page->useCSS)) {

                $css = '<link rel="stylesheet" type="text/css" href="' . $this->wire('config')->urls->$this . 'frontendforms.min.css?v=' . $version . '">' . PHP_EOL;

                if (!is_null($page->ff_forms) && array_filter($page->useCSS)) {
                    $event->return = str_replace('</head>', $css . PHP_EOL . '</head>', $event->return);
                }

            }

            $modules = $this->wire('modules');

            if ($modules->isInstalled('FieldtypeFrontendComments')) {

                // get all comment fields
                $fields = $this->wire('fields')->findByType('FieldtypeFrontendComments');
                if (count($fields) == 0)
                    return;

                // check if the given comment fields have JS and CSS enabled
                $commentFieldJS = [];
                $commentFieldCSS = [];
                $commentFieldStars = [];

                foreach ($fields as $field) {

                    $cssPropName = 'useCommentCSS'.$field->name;
                    $jsPropName = 'useCommentJS'.$field->name;
                    $starsPropName = 'useCommentStars'.$field->name;

                    if ($page->hasField($field->name)) {

                        // Remove all JS
                        if (!array_key_exists('input_removeFrontendCommentsJS', $field->data))
                            $commentFieldJS[$field->name] = 1;
                        if(!is_null($page->$jsPropName)) // overwrite it
                            $commentFieldJS[$field->name] = $page->$jsPropName;

                        // Remove all CSS
                        if (!array_key_exists('input_removeFrontendCommentsCSS', $field->data))
                            $commentFieldCSS[$field->name] = 1;
                        if(!is_null($page->$cssPropName)) // overwrite it
                            $commentFieldCSS[$field->name] = $page->$cssPropName;

                        // Remove star rating CSS and JS
                        if ($field->data['input_fc_stars'])
                            $commentFieldStars[$field->name] = 1;
                        if(!is_null($page->$starsPropName)) // overwrite it
                            $commentFieldStars[$field->name] = $page->$starsPropName;
                    }
                }

                // url to FrontendComments asset folder
                $url = $this->wire('config')->urls->get('FieldtypeFrontendComments') . 'assets/';

                // get module version
                $moduleVersion = $this->wire('modules')->getModuleInfo('FieldtypeFrontendComments')['version'];

                // add CSS files to the frontend if at least one comment field has CSS enabled
                if (in_array(1, $commentFieldCSS)) {

                    // add main CSS file
                    $css = '<link rel="stylesheet" type="text/css" href="' . $url . 'frontendcommentsmain.css?v=' . $moduleVersion .time(). '"/>' . PHP_EOL;

                    // check which markup/framework is enabled
                    $framework = $this->moduleConfig['input_framework'];

                    if ($framework === 'none.json') {
                        // add default CSS file
                        $css .= '<link rel="stylesheet" type="text/css" href="' . $url . 'frontendcommentsnone.css?v=' . $moduleVersion . time().'"/>' . PHP_EOL;
                    }

                    // add star rating CSS to the frontend if enabled
                    if (in_array(1, $commentFieldStars)) {
                        $css .= '<link rel="stylesheet" type="text/css" href="' . $url . 'star-rating.css?v=' . $moduleVersion . '"/>' . PHP_EOL;
                    }

                    $event->return = str_replace('</head>', $css . PHP_EOL . '</head>', $event->return);

                }

                // add JS files to the frontend if at least one comment field has JS enabled
                if (in_array(1, $commentFieldJS)) {

                    // add main JS file
                    $js = '<script src="' . $url . 'frontendcomments.js?v=' . $moduleVersion . '"></script>' . PHP_EOL;

                    // add star rating JS to the frontend if enabled
                    if (in_array(1, $commentFieldStars)) {
                        $js .= '<script src="' . $url . 'star-rating.min.js?v=' . $moduleVersion . ' "></script>' . PHP_EOL;
                        $js .= "<script>var stars = new StarRating('.star-rating');</script>" . PHP_EOL;
                    }

                    $event->return = str_replace('</body>', $js . PHP_EOL . '</body>', $event->return);
                }

            }
        }

        protected function replaceFormPlaceholders(HookEvent $event): void
        {
            $page = $event->object;

            // don't run on admin pages
            if ($page->template->name === 'admin') {
                return;
            }

            $content = $event->return;
            // find all ckeditor fields on the page and run the code only on that fields
            $template = $page->template;
            // get the namespace of the template file
            $namespace = $template->ns;
            // get all fields of the template
            $fields = $template->fieldgroup;

            foreach ($fields as $field) {

                if (($field->type == 'FieldtypeTextarea' || $field->type == 'FieldtypeTextareaLanguage') && ($field->contentType == 1)) {

                    // Save found placeholders temporarily to iterate their number
                    $foundForms = $page->data('found-forms', []);

                    // Find forms with or without surrounding <p> inside body
                    $findFormsRegex = '/(<p>\s*)?{{([a-zA-Z0-9_-]+)}}(\s*<\/p>)?/';

                    // Do the search and Replace
                    $content = preg_replace_callback(
                        $findFormsRegex,
                        function ($matches) use ($page, $event, $namespace) {

                            // This is where the magic happens
                            $formFullName = strtolower($matches[2]);

                            $out = '';

                            // Figure out form name and iteration, if exists
                            $formNameParts = explode('__', $formFullName);
                            $formName = $formNameParts[0];
                            $formCount = $formNameParts[1] ?? 1;

                            // Replace it with nothing if placeholders are unknown
                            if ($formName != $formFullName) return '';

                            // Get form number on the page
                            $formCount = $formCount ?? 1;

                            // Get the array of existing form names from temp page variable
                            $foundForms = $page->data('found-forms');

                            // Increment form number if form name was already found before and exists in the temp found forms array
                            while (in_array($formName . '__' . $formCount, $foundForms)) $formCount++;

                            // Generate form name with new incremented number
                            $formNameCount = $formName . '__' . $formCount;

                            // Include new form name in the list of existing forms
                            $foundForms[] = $formNameCount;

                            // Push to the global page variable
                            $page->data('found-forms', $foundForms);

                            // Create the dynamic function name (with or without a namespace
                            if ($namespace) {
                                $functionName = $namespace . DIRECTORY_SEPARATOR . $formName;
                            } else {
                                $functionName = $formName;
                            }

                            // check if a function with this name exists
                            if (function_exists($functionName)) {
                                $out .= $functionName($formNameCount);
                            }
                            return $out;
                        },
                        $content
                    );
                }
            }

            $event->return = $content;
        }

        /**
         * Method for a hook to add a unit after a label
         * @param HookEvent $event
         * @param string $fieldname
         * @param string $unit
         * @return void
         */
        public static function addUnitToLabel(HookEvent $event, string $fieldname, string $unit): void
        {
            $inputfield = $event->object;
            if ($inputfield->name === $fieldname) {
                $input = $event->return;
                $event->return = '<div id="label-' . $inputfield->name . '" class="fieldlabel">' . $input . ' ' . $unit . '</div>';
            }
        }

        /**
         * Add the appropriate label text next to the input fields of type integer
         * @param HookEvent $event
         * @return void
         */
        protected function inputfieldIntegerRenderAfter(HookEvent $event): void
        {
            self::addUnitToLabel($event, 'input_minTime', $this->_('Seconds'));
            self::addUnitToLabel($event, 'input_maxTime', $this->_('Seconds'));
            self::addUnitToLabel($event, 'input_captchaWidth', 'px');
            self::addUnitToLabel($event, 'input_offset', 'px');
            self::addUnitToLabel($event, 'input_captchaHeight', 'px');
            self::addUnitToLabel($event, 'input_captchaFontsize', 'px');
            self::addUnitToLabel($event, 'input_maxAttempts', $this->_('Attempts'));
            self::addUnitToLabel($event, 'input_bgnumberOfColors', $this->_('Colors'));
            self::addUnitToLabel($event, 'input_numberOfColorsOfLines', $this->_('Colors'));
            self::addUnitToLabel($event, 'input_captchaNumberOfLines', $this->_('Lines'));
        }

        /**
         * Get various information about an IP address from ip-api.com
         * @param string $ip
         * @return \stdClass - returns a json-decoded object
         */
        public static function getIPData(string $ip): stdClass
        {
            $iptolocation = 'http://ip-api.com/json/' . $ip;
            $location = file_get_contents($iptolocation);
            return json_decode($location);
        }

        /**
         * Render a link to domaintools.com for further information about the IP address
         * @param string $ip
         * @return string
         */
        protected function executeWhoisLookUp(string $ip): string
        {
            $whoislookup = '<div id="linkwrapper"><a href="https://whois.domaintools.com/' . $ip . '" title="' . $this->_('Opens in a new window') . '" target="_blank">';
            $whoislookup .= sprintf($this->_('More detailed information about the IP %s at www.domaintools.com'),
                    $ip) . '</a></div>';
            return $whoislookup;
        }


        /**
         * Render a detail view table for a given IP address inside the panel
         * @param string $ip
         * @return string
         * @throws WireException
         * @throws WirePermissionException
         */
        protected function executeViewDetailsTable(string $ip): string
        {
            $logs = $this->wire('log')->getEntries('failed-attempts-frontendforms');
            $headline = '<h2>' . sprintf($this->_('Failed attempts for IP %s'), $ip) . '</h2>';

            $table = $this->wire('modules')->get('MarkupAdminDataTable');
            $table->headerRow([
                $this->_('Date'),
                $this->_('URL'),
                $this->_('Form-ID')
            ]);

            foreach ($logs as $log) {
                $text = json_decode($log['text']);
                // grab only log with the given IP
                if ($text->IP == $ip) {
                    $table->row([$this->_('Date') . ': ' . $log['date'],
                        $this->_('URL') . ': ' . $log['url'],
                        $this->_('Form-ID') . ': ' . $text->FormID]);
                }
            }
            return $headline . $table->render();
        }

        /**
         * @param array $data
         * @return string
         * @throws WireException
         * @throws WirePermissionException
         */
        public function ___executeTable(array $data = []): string
        {
            if ($data) {
                $table = $this->wire('modules')->get('MarkupAdminDataTable');
                $table->setEncodeEntities(false);
                $table->setSortable(false);
                $table->headerRow([
                    $this->_('IP address'),
                    $this->_('User'),
                    $this->_('Blacklist entry'),
                    $this->_('Number of blocks'),
                    $this->_('Details'),
                    $this->_('Add/remove IP from blacklist'),
                ]);
                $blackListIPs = preg_split('/\r\n|\r|\n/', $this->input_preventIPs);

                // create all table rows
                foreach ($data as $ip => $entry) {
                    // create a link to open panel
                    $details = '';
                    if (!$this->input->get('modal')) {
                        $button = $this->wire('modules')->get('InputfieldButton');
                        $button->value = $this->_('View details');
                        $button->attr('data-href', '/detail-view/' . $ip);
                        $button->addClass('pw-panel');
                        $button->setSmall();
                        $details .= $button->render();
                    }

                    // instantiate button object for adding the IP to the blacklist
                    $button = $this->wire('modules')->get('InputfieldSubmit');
                    $button->setSmall();
                    $button->name = 'submit_save_ip';
                    $button->setAttribute('data-from_id', 'Inputfield_submit_save_module');
                    $button->value = $ip;
                    if (in_array($ip, $blackListIPs)) {
                        $fa = 'fa-check';
                        // remove button
                        $button->name = 'submit_remove_ip';
                        $button->text = $this->_('Remove from blacklist');
                        $button->setSecondary();
                        $out = $button->render();
                    } else {
                        // create add button
                        $button->text = $this->_('Add to blacklist');
                        $out = $button->render();
                        $fa = 'fa-times';
                    }
                    $table->row([
                        $ip,
                        $entry['user'],
                        '<i class="fa fa-fw ' . $fa . '"></i>',
                        $entry['count'],
                        $details,
                        $out
                    ]);
                }
                return $table->render();
            } else {
                return $this->_('Sorry, but there is not data available. Please check if logging is enabled.');
            }
        }

        /**
         * Find all ttf fonts inside the project that can be used for the CAPTCHA text
         * @return array
         * @throws WireException
         */
        protected function findAllFontfiles(): array
        {

            $files = [];
            $rootPath = $this->wire('config')->paths->root;
            $results = $this->wire('files')->find($rootPath, ['recursive' => true, 'extensions' => ['ttf'], 'returnRelative' => true]);

            foreach ($results as $font) {
                // do not add Fontawesome to the fonts
                if (!str_contains($font, 'fontawesome')) {
                    $files[$font] = ucfirst(pathinfo($font, PATHINFO_BASENAME));
                }
            }
            return array_unique($files);
        }

        /**
         * Module config
         * @param InputfieldWrapper $inputfields
         * @throws WireException
         * @throws WirePermissionException
         */
        public function getModuleConfigInputfields(InputfieldWrapper $inputfields): void
        {

            $fieldset1 = $this->wire('modules')->get('InputfieldFieldset');
            $fieldset1->label = $this->_('Markup and styling settings for the forms');
            $fieldset1->icon = 'fa-cog';
            $fieldset1->description = $this->_('Make your global settings for the output. Most of the settings can be overwritten on per form base if needed.');
            $fieldset1->collapsed = 1;

            // Required fields settings
            $fieldsetRequired = $this->wire('modules')->get('InputfieldFieldset');
            $fieldsetRequired->label = $this->_('Settings for required fields');
            $fieldsetRequired->collapsed = 1;

            // Show asterisk on required fields
            $showasterisk = $this->wire('modules')->get('InputfieldCheckbox');
            $showasterisk->label = $this->_('Asterisk for required field');
            $showasterisk->label2 = $this->_('Add an asterisk on required fields after the label tag.');
            $showasterisk->description = $this->_('Adds a span element with an asterisk after the field label on required fields (<span class="asterisk">*</span>).');
            $showasterisk->notes = $this->_('You can also use CSS pseudo class :after to add an asterisk to the label tag. For this reason you can disable the asterisk markup.');
            $showasterisk->attr('name', 'input_showasterisk');
            $showasterisk->attr('checked', $this->input_showasterisk ? 'checked' : '');
            $fieldsetRequired->add($showasterisk, $inputfields);

            // Required hint position
            $requiredHintPosition = $this->wire('modules')->get('InputfieldRadios');
            $requiredHintPosition->attr('name', 'input_requiredHintPosition');
            $requiredHintPosition->addOptions([
                'none' => $this->_('Do not show hint for required fields'),
                'top' => $this->_('Show hint for required fields on top'),
                'bottom' => $this->_('Show hint for required fields on bottom')
            ]);
            $requiredHintPosition->defaultValue = ['top'];
            $requiredHintPosition->required = 1;
            $requiredHintPosition->attr('value', $this->input_requiredHintPosition);
            $requiredHintPosition->description = $this->_('Disable displaying of the text (none), place the text before (top) or after (bottom) the form.');
            $requiredHintPosition->label = $this->_('Enable/disable the display of the required text and set the position');
            $requiredHintPosition->notes = $this->_('Can be overwritten on each form.');
            $requiredHintPosition->columnWidth = 50;
            $fieldsetRequired->add($requiredHintPosition, $inputfields);

            // Required hint custom text
            $requiredText = wire('modules')->get('InputfieldText');
            $requiredText->name = 'input_requiredText';
            $requiredText->label = $this->_('Hint for visitors that all required fields have to be filled out');
            $requiredText->value = $this->input_requiredText;
            $reqText = $this->_('This text will be displayed on the form depending on your settings.') . ' ';
            $reqText .= $this->_('If nothing is entered, a default text will be displayed instead.');
            $requiredText->description = $reqText;
            $requiredText->notes = $this->_('Can be overwritten on each form.');
            $requiredText->useLanguages = true;
            $requiredText->showIf = "input_requiredHintPosition!=none";
            $requiredText->columnWidth = 50;
            $fieldsetRequired->add($requiredText, $inputfields);

            $fieldset1->add($fieldsetRequired, $inputfields);

            // Alert messages settings
            $fieldsetAlerts = $this->wire('modules')->get('InputfieldFieldset');
            $fieldsetAlerts->label = $this->_('Settings for messages after form submission');
            $fieldsetAlerts->collapsed = 1;

            // Success message after submission
            $alertSuccessText = $this->wire('modules')->get('InputfieldText');
            $alertSuccessText->name = 'input_alertSuccessText';
            $alertSuccessText->label = $this->_('The message after successful submission');
            $alertSuccessText->value = $this->input_alertSuccessText;
            $alertText = $this->_('This text will be displayed after a form was submitted successfully.') . ' ';
            $alertText .= $this->_('If nothing is entered, a default text will be displayed instead.');
            $alertSuccessText->description = $alertText;
            $alertSuccessText->notes = $this->_('Can be overwritten on each form.');
            $alertSuccessText->useLanguages = true;
            $fieldsetAlerts->add($alertSuccessText, $inputfields);

            // Error message after failed submission
            $alertErrorText = $this->wire('modules')->get('InputfieldText');
            $alertErrorText->name = 'input_alertErrorText';
            $alertErrorText->label = $this->_('The message after submission failed');
            $alertErrorText->value = $this->input_alertErrorText;
            $alertText = $this->_('This text will be displayed after errors on form submission.') . ' ';
            $alertText .= $this->_('If nothing is entered, a default text will be displayed instead.');
            $alertErrorText->description = $alertText;
            $alertErrorText->notes = $this->_('Can be overwritten on each form.');
            $alertErrorText->useLanguages = true;
            $fieldsetAlerts->add($alertErrorText, $inputfields);

            $fieldset1->add($fieldsetAlerts, $inputfields);

            // Markup and styling settings
            $fieldsetMarkup = $this->wire('modules')->get('InputfieldFieldset');
            $fieldsetMarkup->label = $this->_('Settings for the markup and styling of the form and the input fields');
            $fieldsetMarkup->collapsed = 1;

            // Remove wrappers from input fields
            $wrappers = $this->wire('modules')->get('InputfieldCheckboxes');
            $wrappers->label = $this->_('Add wrappers to the form fields');
            $wrappers->name = 'input_wrappers';
            $wrappers->addOption('inputwrapper', $this->_('Add wrapper div for the inputfield (input wrapper)'));
            $wrappers->addOption('fieldwrapper', $this->_('Add outer wrapper div for each formfield (field wrapper)'));
            $wrappers->value = $this->input_wrappers;
            $fieldsetMarkup->add($wrappers, $inputfields);

            // Add wrapper div after form tag to wrap all elements of the form
            $wrapperFormElements = $this->wire('modules')->get('InputfieldCheckbox');
            $wrapperFormElements->attr('name', 'input_wrapperFormElements');
            $wrapperFormElements->attr('checked', $this->input_wrapperFormElements === 1 ? 'checked' : '');
            $wrapperFormElements->label = $this->_('Add an additional wrapper div after opening and before closing form tag');
            $wrapperFormElements->label2 = $this->_('Add a wrapper div over all form elements');
            $wrapperFormElements->notes = $this->_('In some rare cases you need to wrap all form elements inside an extra wrapper div, which is between the opening and closing form tag. For this case you can add the div by checking the box.');
            $wrapperFormElements->columnWidth = 50;
            $fieldsetMarkup->add($wrapperFormElements, $inputfields);

            $wrapperFormElementsCSSClass = $this->wire('modules')->get('InputfieldText');
            $wrapperFormElementsCSSClass->attr('name', 'input_wrapperFormElementsCSSClass');
            $wrapperFormElementsCSSClass->attr('value', $this->input_wrapperFormElementsCSSClass);
            $wrapperFormElementsCSSClass->label = $this->_('Add a CSS class to to the extra wrapper div');
            $wrapperFormElementsCSSClass->notes = $this->_('By default, an unique id will be added, but if you need a special styling class, you can enter the name of the class in this field.');
            $wrapperFormElementsCSSClass->showIf = "input_wrapperFormElements=1";
            $wrapperFormElementsCSSClass->columnWidth = 50;
            $fieldsetMarkup->add($wrapperFormElementsCSSClass, $inputfields);

            // Select CSS framework
            $frameworkSelect = $this->wire('modules')->get('InputfieldSelect');
            $frameworkSelect->attr('name', 'input_framework');
            $frameworkSelect->label = $this->_('Output rendering');
            $frameworkSelect->description = $this->_('Select if you want to use a framework for rendering the form or not');
            $defaultFrameWorkFiles = $this->wire('files')->find($this->modulePath . 'CSSClasses/', ['extensions' => 'json']);
            $customFrameworkFiles = $this->wire('files')->find($this->customFrameworksPath, ['extensions' => 'json']);
            $frameWorkFiles = array_merge($defaultFrameWorkFiles, $customFrameworkFiles);
            $key = array_search($this->modulePath . 'CSSClasses/none.json', $frameWorkFiles);
            array_unshift($frameWorkFiles, $frameWorkFiles[$key]); // move none.json to the first position in the array

            $frameWorkOptions = [];
            foreach ($frameWorkFiles as $path) {
                $label = ucwords(pathinfo($path, PATHINFO_FILENAME), ' ');
                if ($label == 'None') {
                    $label = $this->_('No framework');
                }
                $frameWorkOptions[pathinfo($path, PATHINFO_BASENAME)] = $label;
            }
            // check for external frameworks under site/assets/files/Frontendforms/frameworks
            $frameworkSelect->addOptions(array_unique($frameWorkOptions));
            $frameworkSelect->attr('value', $this->input_framework);
            $frameworkSelect->required = 1;
            $fieldsetMarkup->add($frameworkSelect, $inputfields);


            //input_global_label_tag
            $customFrameworkPath = $this->wire('modules')->get('InputfieldText');
            $customFrameworkPath->attr('name', 'input_customframeworkpath');
            $customFrameworkPath->attr('value', $this->input_customframeworkpath);
            $customFrameworkPath->label = $this->_('Custom path for the CSS classes json file');
            $customFrameworkPath->description = $this->_('If you want to save your custom CSS class file in a directory other than site/assets/files/FrontendForms/frameworks/, you can enter the path to your custom directory here. Otherwise leave this field empty.');
            $notes = $this->_('Please enter the path starting with site (eg site/templates/FrontendForms/frameworks).');
            $notes .= '<br>' . sprintf($this->_('You find more information about custom CSS json files %s.'), '<a target="_blank" href="https://github.com/juergenweb/FrontendForms/blob/main/README.md#support-for-css-frameworks">here</a>');
            $customFrameworkPath->entityEncodeText = false;

            $customFrameworkPath->notes = $notes;
            $fieldsetMarkup->add($customFrameworkPath, $inputfields);

            // Append labels on checkboxes and radio buttons after input tag
            $appendLabels = $this->wire('modules')->get('InputfieldCheckboxes');
            $appendLabels->label = $this->_('Append the label after the input tag on checkboxes and radios');
            $appendLabels->description = $this->_('By default, radio and checkbox tags are wrapped by their label tag. If you want to append the label tag after the input tag, please check the appropriate box.');
            $appendLabels->notes = $this->_('Can be overwritten on each form.');
            $appendLabels->attr('name', 'input_appendLabel');
            $appendLabels->attr('value', $this->input_appendLabel);
            $appendLabels->addOption('appendcheckbox', $this->_('Append label on checkboxes'));
            $appendLabels->addOption('appendradio', $this->_('Append label on radio buttons'));
            $fieldsetMarkup->add($appendLabels, $inputfields);

            // Set global position of the input field description
            $descPosition = $this->wire('modules')->get('InputfieldSelect');
            $descPosition->label = $this->_('Set the position of the field description');
            $descPosition->description = $this->_('By default, the field description will be displayed after the input field. If you want you can display the description before or after the label too.');
            $descPosition->notes = $this->_('Can be overwritten on each form and even on each input field.');
            $descPosition->attr('name', 'input_descPosition');
            $descPosition->attr('value', $this->input_descPosition);
            $descPosition->required = 1;
            $descPosition->defaultValue = 'afterInput';
            $descPosition->addOption('beforeLabel', $this->_('Before the field label'));
            $descPosition->addOption('afterLabel', $this->_('After the field label'));
            $descPosition->addOption('afterInput', $this->_('After the input field'));
            $fieldsetMarkup->add($descPosition, $inputfields);

            //input_global_label_tag
            $globalLabelTag = $this->wire('modules')->get('InputfieldText');
            $globalLabelTag->attr('name', 'input_global_label_tag');
            $globalLabelTag->attr('value', $this->input_global_label_tag);
            $globalLabelTag->label = $this->_('Tag for the label element');
            $globalLabelTag->description = $this->_('Change the tag (p, div,..) for the label of an input field.');
            $globalLabelTag->notes = $this->_('If you are not satisfied with the tag used for this item, you can modify it according to your needs. Otherwise, leave this field blank.');
            $fieldsetMarkup->add($globalLabelTag, $inputfields);

            //input_global_desc_tag
            $globalDescTag = $this->wire('modules')->get('InputfieldText');
            $globalDescTag->attr('name', 'input_global_desc_tag');
            $globalDescTag->attr('value', $this->input_global_desc_tag);
            $globalDescTag->label = $this->_('Tag for the description element');
            $globalDescTag->description = $this->_('Change the tag (p, div,..) for the description of an input field.');
            $globalDescTag->notes = $this->_('If you are not satisfied with the tag used for this item, you can modify it according to your needs. Otherwise, leave this field blank.');
            $fieldsetMarkup->add($globalDescTag, $inputfields);

            //input_global_notes_tag
            $globalNotesTag = $this->wire('modules')->get('InputfieldText');
            $globalNotesTag->attr('name', 'input_global_notes_tag');
            $globalNotesTag->attr('value', $this->input_global_notes_tag);
            $globalNotesTag->label = $this->_('Tag for the notes element');
            $globalNotesTag->description = $this->_('Change the tag (p, div,..) for the notes of an input field.');
            $globalNotesTag->notes = $this->_('If you are not satisfied with the tag used for this item, you can modify it according to your needs. Otherwise, leave this field blank.');
            $fieldsetMarkup->add($globalNotesTag, $inputfields);

            //input_global_msg_tag
            $globalMsgTag = $this->wire('modules')->get('InputfieldText');
            $globalMsgTag->attr('name', 'input_global_msg_tag');
            $globalMsgTag->attr('value', $this->input_global_msg_tag);
            $globalMsgTag->label = $this->_('Tag for the message elements (success and error message)');
            $globalMsgTag->description = $this->_('Change the tag (p, div,..) for the messages of an input field.');
            $globalMsgTag->notes = $this->_('If you are not satisfied with the tag used for this item, you can modify it according to your needs. Otherwise, leave this field blank.');
            $fieldsetMarkup->add($globalMsgTag, $inputfields);

            $fieldsetStyle = $this->wire('modules')->get('InputfieldFieldset');
            $fieldsetStyle->label = $this->_('Custom CSS classes');
            $fieldsetStyle->collapsed = 1;// by default, this fieldset should be collapsed
            $fieldsetStyle->description = $this->_('You can overwrite each CSS class with your own class name(s). If you want to add multiple classes at the same time please separate them with a whitespace (fe class1 class2).');

            // Add your own CSS classes
            //  get all class field names as an array
            $cssClassFields = array_keys((array)$this->defaultClasses);
            $fields = [];
            foreach ($cssClassFields as $field) {
                $label = substr(str_replace('_', ' ', $field), 0, -5);
                $fields['input_' . $field] = sprintf($this->_('CSS class for the %s'), $this->_($label));
            }
            $i = 0;
            foreach ($fields as $fieldName => $label) {
                $i++;
                $fieldClass = substr($fieldName, 6);
                ${'css-' . $i} = $this->wire('modules')->get('InputfieldText');
                ${'css-' . $i}->label = $label;
                ${'css-' . $i}->attr('name', $fieldName);
                ${'css-' . $i}->attr('value', $this->$fieldName ?: '');
                if (isset($this->defaultClasses->$fieldClass)) {
                    ${'css-' . $i}->notes($this->_('Current class') . ': ' . $this->defaultClasses->$fieldClass);
                }
                $fieldsetStyle->add(${'css-' . $i}, $inputfields);
            }
            $fieldsetMarkup->add($fieldsetStyle, $inputfields);
            $fieldset1->add($fieldsetMarkup, $inputfields);

            $fieldsetAssets = $this->wire('modules')->get('InputfieldFieldset');
            $fieldsetAssets->label = $this->_('Settings for stylesheets and scripts');
            $fieldsetAssets->collapsed = 1;

            // Remove JS on Frontend
            $removeJS = $this->wire('modules')->get('InputfieldCheckbox');
            $removeJS->attr('name', 'input_removeJS');
            $removeJS->attr('checked', $this->input_removeJS === 1 ? 'checked' : '');
            $removeJS->label = $this->_('Javascript setting');
            $removeJS->label2 = $this->_('Remove all module Javascript files from frontend');
            $removeJS->notes = $this->_('All JavaScript files, which will be needed for some features of the form, will added before the closing body tag on the frontend by default . You can prevent the embedding of the scripts completely by checking the box.');
            $removeJS->columnWidth = 50;
            $fieldsetAssets->add($removeJS, $inputfields);

            // Remove CSS on Frontend
            $removeCSS = $this->wire('modules')->get('InputfieldCheckbox');
            $removeCSS->attr('name', 'input_removeCSS');
            $removeCSS->attr('checked', $this->input_removeCSS === 1 ? 'checked' : '');
            $removeCSS->label = $this->_('CSS setting');
            $removeCSS->label2 = $this->_('Remove frontendforms.css from template');
            $removeCSS->notes = $this->_('A small CSS file for the forms will be added to the template by default. You can remove the embedding of the CSS file by checking the box.');
            $removeCSS->columnWidth = 50;
            $fieldsetAssets->add($removeCSS, $inputfields);

            $fieldset1->add($fieldsetAssets, $inputfields, $inputfields);
            $inputfields->add($fieldset1);

            $fieldset2 = $this->wire('modules')->get('InputfieldFieldset');
            $fieldset2->label = $this->_('Ajax form submission');
            $fieldset2->collapsed = 1;
            $fieldset2->icon = 'fa-code';

            $ajaxformsubmission = $this->wire('modules')->get('InputfieldCheckbox');
            $ajaxformsubmission->attr('name', 'input_ajaxformsubmission');
            $ajaxformsubmission->attr('checked', $this->input_ajaxformsubmission == '1' ? 'checked' : '');
            $ajaxformsubmission->label = $this->_('Submit forms via Ajax');
            $ajaxformsubmission->description = $this->_('If the box is checked, every form and its form data will be submitted via Ajax. This means that there will be no page reload after submission.');
            $ajaxformsubmission->notes = $this->_('Please note, if Javascript is not enabled, the form will be submitted with page reload, but this could cause problems under certain circumstances where no page reload is necessary. If Javascript is not enabled, the user will see a warning message above the form.');

            $fieldset2->add($ajaxformsubmission, $inputfields);

            $hideProgressBar = $this->wire('modules')->get('InputfieldCheckbox');
            $hideProgressBar->attr('name', 'input_hideProgressBar');
            $hideProgressBar->attr('checked', $this->input_hideProgressBar == '1' ? 'checked' : '');
            $hideProgressBar->label = $this->_('Hide the progressbar during form submission');
            $hideProgressBar->description = $this->_('If the box is checked, the progressbar will not be displayed during the form submission via Ajax.');
            $hideProgressBar->notes = $this->_('Usually, a progressbar with a text will be displayed during the submission of a form via Ajax to inform the user that the form will be submitted. This could be helpful to users, if the submission will take a little more time.');

            $fieldset2->add($hideProgressBar, $inputfields);

            // Custom message during Ajax request
            $ajaxMsg = $this->wire('modules')->get('InputfieldText');
            $ajaxMsg->name = 'input_ajaxMsg';
            $ajaxMsg->label = $this->_('AJAX form submission info text');
            $ajaxMsg->value = $this->input_ajaxMsg;
            $ajaxMsgText = $this->_('This text will be displayed next to the progress bar during a form is submitted via AJAX.') . ' ';
            $ajaxMsgText .= $this->_('If nothing is entered, a default text will be displayed instead.');
            $ajaxMsg->description = $ajaxMsgText;
            $ajaxMsg->notes = $this->_('Can be overwritten on each form.');
            $ajaxMsg->useLanguages = true;

            $fieldset2->add($ajaxMsg, $inputfields);

            $inputfields->add($fieldset2);

            $fieldset3 = $this->wire('modules')->get('InputfieldFieldset');
            $fieldset3->label = $this->_('Email settings');
            $fieldset3->collapsed = 1;
            $fieldset3->icon = 'fa-envelope';

            //  Select an email template or not
            if ($this->emailTemplates) {
                $emailTemplate = $this->wire('modules')->get('InputfieldSelect');
                $emailTemplate->label = $this->_('HTML email template setting');
                $emailTemplate->attr('name', 'input_emailTemplate');
                $emailTemplate->attr('class', 'ff-imagepicker');

                // create and add all options
                $this->createEmailTemplatesOptions($emailTemplate);

                $emailTemplate->attr('value', $this->input_emailTemplate);
                $emailTemplate->required = 1;
                $emailTemplate->description = $this->_('Choose whether you want to use the HTML template for your emails and if so, which one.');
                $emailTemplate->notes = $this->_('If you are using FrontendForms with the PW WireMail class to send emails, you can use a HTML email template by adding the mailTemplate() method to the WireMail object. Can be overwritten on each form.');
                $fieldset3->add($emailTemplate, $inputfields);
            }

            // enter a global date format for usage of date strings in emails
            $dateFormat = $this->wire('modules')->get('InputfieldText');
            $dateFormat->label = $this->_('Date format');
            $dateFormat->attr('name', 'input_dateformat');
            if ($this->wire('modules')->isInstalled('LanguageSupport')) {
                $this->setLanguageValue('input_dateformat', $dateFormat);
            } else {
                $dateFormat->value = $this->input_dateformat;
            }
            $dateFormat->columnWidth = 50;
            $dateFormat->placeholder = $this->_('fe. Y-m-d');
            $dateFormat->description = $this->_('Enter a global date format which can be used for date strings in email templates.');
            $dateFormat->required = 1;
            $fieldset3->add($dateFormat, $inputfields);

            // enter a global time format for usage of time strings in emails
            $timeFormat = $this->wire('modules')->get('InputfieldText');
            $timeFormat->label = $this->_('Time format');
            $timeFormat->attr('name', 'input_timeformat');
            if ($this->wire('modules')->isInstalled('LanguageSupport')) {
                $this->setLanguageValue('input_timeformat', $timeFormat);
            } else {
                $timeFormat->value = $this->input_timeformat;
            }
            $timeFormat->columnWidth = 50;
            $timeFormat->required = 1;
            $timeFormat->placeholder = $this->_('fe. H:i');
            $timeFormat->description = $this->_('Enter a global time format which can be used for time strings in email templates.');
            $fieldset3->add($timeFormat, $inputfields);

            $inputfields->add($fieldset3);

            $fieldset4 = $this->wire('modules')->get('InputfieldFieldset');
            $fieldset4->label = $this->_('Data privacy settings');
            $fieldset4->collapsed = 1;
            $fieldset4->icon = 'fa-list';

            // TODO
            $privacyPageSelect = $this->wire('modules')->get('InputfieldSelect');
            $privacyPageSelect->attr('name', 'input_privacypageselect');
            $privacyPageSelect->label = $this->_('Select the type of page that contains your privacy policy');
            $privacyPageSelect->description = $this->_('Choose whether you want to use an internal ProcessWire page or an external website as your privacy policy page.');
            $privacyPageSelect->addOption('int', $this->_('Internal ProcessWire page'));
            $privacyPageSelect->addOption('ext', $this->_('Page of an external website'));
            $privacyPageSelect->attr('value', $this->input_privacypageselect);
            $privacyPageSelect->defaultValue = 'int';
            $privacyPageSelect->required = 1;
            $fieldset4->add($privacyPageSelect, $inputfields);


            $privacyPageUrl = $this->wire('modules')->get('InputfieldUrl');
            $privacyPageUrl->attr('name', 'input_privacypageurl');
            $privacyPageUrl->label = $this->_('URL to the external page with the privacy policy');
            $privacyPageUrl->description = $this->_('Enter the URL of the page that contains your privacy policy.');
            $privacyPageUrl->attr('value', $this->input_privacypageurl);
            $privacyPageUrl->useLanguages = true;
            $privacyPageUrl->showIf = 'input_privacypageselect=ext';
            $privacyPageUrl->requiredIf = 'input_privacypageselect=ext';
            $fieldset4->add($privacyPageUrl, $inputfields);

            // Select the data privacy page
            $dataPrivacySelect = $this->wire('modules')->get('InputfieldPageAutocomplete');
            $dataPrivacySelect->attr('name', 'input_privacy');
            $dataPrivacySelect->maxSelectedItems = 1;
            $dataPrivacySelect->label = $this->_('Privacy policy page');
            $dataPrivacySelect->description = $this->_('Select the page that contains your privacy policy by entering a search term for the title of that page (e.g. privacy).');
            $dataPrivacySelect->notes = $this->_('The link to this page will be used inside the Privacy class for generating the "Accept the privacy policy" checkbox.');
            $dataPrivacySelect->attr('value', $this->input_privacy);
            $dataPrivacySelect->showIf = 'input_privacypageselect=int';
            $dataPrivacySelect->requiredIf = 'input_privacypageselect=int';
            $fieldset4->add($dataPrivacySelect, $inputfields);

            $inputfields->add($fieldset4);

            $fieldset5 = $this->wire('modules')->get('InputfieldFieldset');
            $fieldset5->label = $this->_('Spam protection and security settings for the forms');
            $fieldset5->description = $this->_('Make your global settings for spam protection and security. Most of the settings can be overwritten on per form base if needed.');
            $fieldset5->collapsed = 1;
            $fieldset5->icon = 'fa-shield';
            $fieldset5->attr('id', 'spam');

            $fieldsetsecurity1 = $this->wire('modules')->get('InputfieldFieldset');
            $fieldsetsecurity1->label = $this->_('Measure 1: Restrict number of failed attempts');
            $fieldsetsecurity1->collapsed = 1;
            $fieldsetsecurity1->attr('id', 'failed-attempts');

            // set max number of failed attempts
            $maxAttempts = $this->wire('modules')->get('InputfieldInteger');
            $maxAttempts->label = $this->_('Max number of failed attempts');
            $maxAttempts->description = $this->_('Please set the max number of failed attempts for submitting a form.');
            $maxAttempts->notes = $this->_('If set to 0 then this feature is disabled. After reaching the limit the user will be blocked by using a session and all browser windows have to be closed to remove the blocking.');
            $maxAttempts->attr('name', 'input_maxAttempts');
            $maxAttempts->attr('type', 'number');
            $maxAttempts->attr('value', $this->input_maxAttempts);
            $maxAttempts->attr('min', 0);
            $maxAttempts->columnWidth = 50;
            $fieldsetsecurity1->add($maxAttempts, $inputfields);

            $logFailedAttempts = $this->wire('modules')->get('InputfieldCheckbox');
            $logFailedAttempts->attr('name', 'input_logFailedAttempts');
            $logFailedAttempts->attr('checked', $this->input_logFailedAttempts == '1' ? 'checked' : '');
            $logFailedAttempts->label = $this->_('Log IPs of blocked visitors');
            $logFailedAttempts->description = $this->_('If the box is checked, an entry with the IP address of the visitor, the form id and the date will be stored in the logfiles after the visitor was blocked.');
            $logFailedAttempts->notes = $this->_('Please note, that you have to inform your users in your privacy policy, that the IP address will be stored in this case.');
            $logFailedAttempts->columnWidth = 50;
            $fieldsetsecurity1->add($logFailedAttempts, $inputfields);

            $fieldset5->add($fieldsetsecurity1, $inputfields);

            $fieldsetsecurity2 = $this->wire('modules')->get('InputfieldFieldset');
            $fieldsetsecurity2->label = $this->_('Measure 2: Time-trap - Measuring time until form submission');
            $fieldsetsecurity2->collapsed = 1;

            // add min time in seconds
            $minTime = $this->wire('modules')->get('InputfieldInteger');
            $minTime->label = $this->_('Min time before form submission');
            $minTime->description = $this->_('Please set the min time in seconds before a form should be submitted.');
            $minTime->notes = $this->_('If set to 0 then this feature is disabled. This feature measures the time between loading and submitting a form. If it is to fast (fe a spam bot) it will lead to a form error. ');
            $minTime->attr('name', 'input_minTime');
            $minTime->attr('value', $this->input_minTime);
            $minTime->attr('min', 0);
            $minTime->attr('type', 'number');
            $minTime->columnWidth = 50;
            $fieldsetsecurity2->add($minTime, $inputfields);

            // add max time in seconds
            $maxTime = $this->wire('modules')->get('InputfieldInteger');
            $maxTime->label = $this->_('Max time until form submission');
            $maxTime->description = $this->_('Please set the max time in seconds until a form should be submitted.');
            $maxTime->notes = $this->_('If set to 0 then this feature is disabled. This feature measures the time between loading and submitting a form. If it is to slow (fe a spam bot analyzing the form) it will lead to a form error. ');
            $maxTime->attr('name', 'input_maxTime');
            $maxTime->attr('type', 'number');
            $maxTime->attr('min', 0);
            $maxTime->attr('value', $this->input_maxTime);
            $maxTime->columnWidth = 50;
            $fieldsetsecurity2->add($maxTime, $inputfields);

            $fieldset5->add($fieldsetsecurity2, $inputfields);

            $fieldsetsecurity3 = $this->wire('modules')->get('InputfieldFieldset');
            $fieldsetsecurity3->label = $this->_('Measure 3: Honeypot field');
            $fieldsetsecurity3->collapsed = 1;

            $useHoneypot = $this->wire('modules')->get('InputfieldCheckbox');
            $useHoneypot->attr('name', 'input_useHoneypot');
            $useHoneypot->attr('checked', $this->input_useHoneypot == '1' ? 'checked' : '');
            $useHoneypot->label = $this->_('Add honeypot field to form');
            $useHoneypot->description = $this->_('If the box is checked, an invisible honeypot field for spam protection will be added to the form.');
            $useHoneypot->notes = $this->_('It is recommended to use a honeypot field. Disable this feature only if you have a good reason to do so.');
            $fieldsetsecurity3->add($useHoneypot, $inputfields);

            $fieldset5->add($fieldsetsecurity3, $inputfields);

            $fieldsetsecurity4 = $this->wire('modules')->get('InputfieldFieldset');
            $fieldsetsecurity4->label = $this->_('Measure 4: Using IP blacklist');
            $fieldsetsecurity4->collapsed = 1;

            // Add wrapper div after form tag to wrap all elements of the form
            $useIPBan = $this->wire('modules')->get('InputfieldCheckbox');
            $useIPBan->attr('name', 'input_useIPBan');
            $useIPBan->attr('checked', $this->input_useIPBan === 1 ? 'checked' : '');
            $useIPBan->label = $this->_('Check IP of visitors');
            $useIPBan->label2 = $this->_('Enable checking of visitors IP against blacklist');
            $useIPBan->description = $this->_('You can prevent IP addresses from viewing your forms, if they might be harmful to your site. By checking/unchecking the box, you can enable/disable the checking against the blacklist.');
            $useIPBan->notes = $this->_('This only works, if there is at least 1 entry in the next input field');
            $useIPBan->columnWidth = 50;
            $fieldsetsecurity4->add($useIPBan, $inputfields);

            // prevent the following IP addresses from visiting sites of this module on the frontend
            $preventIPs = $this->wire('modules')->get('InputfieldTextarea');
            $preventIPs->attr('name', 'input_preventIPs');
            $preventIPs->label = $this->_('Blacklist of forbidden IPs');
            $preventIPs->description = $this->_('Please enter every IP address on a new line. Every visit of an IP address listed below prevents the form to be rendered on the frontend. Visitors see an alert box instead, that informs about the banned IP address.');
            $preventIPs->notes = $this->_('Tip: You can take a look at the logfile for failed login attempts and enter fe. IP addresses that appear very often. Works only if logging failed attempts is enabled.');
            $preventIPs->attr('value', $this->input_preventIPs);
            $preventIPs->showIf = "input_useIPBan=1";
            $preventIPs->columnWidth = 50;

            $fieldsetsecurity4->add($preventIPs, $inputfields);

            $fieldset5->add($fieldsetsecurity4, $inputfields);

            //CAPTCHA

            $fieldsetsecurity5 = $this->wire('modules')->get('InputfieldFieldset');
            $fieldsetsecurity5->collapsed = 1;

            // disable this fieldset if GD lib is not enabled
            if (!$this->gd_lib) {

                $status = ' ' . $this->_('(disabled: Please enable GD lib to enable CAPTCHA support)');
            } else {
                $status = '';
            }
            $fieldsetsecurity5->label = $this->_('Measure 5: CAPTCHA') . $status;

            // show the input fields only if GD lib is enabled
            if ($this->gd_lib) {
                // BASIC-SETTINGS
                $fieldsetbasic = $this->wire('modules')->get('InputfieldFieldset');
                $fieldsetbasic->label = $this->_('Basic settings');
                $fieldsetbasic->columnWidth = 100;
                $fieldsetbasic->collapsed = 1;

                // Enable/disable CAPTCHA on forms
                $captchaType = $this->wire('modules')->get('InputfieldRadios');
                $captchaType->attr('name', 'input_captchaType');
                $captchaType->label = $this->_('Use a CAPTCHA');
                $captchaType->description = $this->_('Choose whether you want to use a CAPTCHA and if so what kind.');
                $captchaTypes = $this->wire('files')->find($this->modulePath . 'Formelements/Captcha/variants/',
                    ['recursive' => 0]);
                $captchaType->addOption('none', $this->_('No CAPTCHA'));

                foreach ($captchaTypes as $file) {
                    $className = pathinfo($file, PATHINFO_FILENAME);
                    $cname = 'FrontendForms\\' . $className;
                    $option = new $cname();
                    $captchaType->addOption($className, $option->title, ['flow' => 'up', 'tooltip' => $option->desc]);
                }

                $captchaType->attr('value', $this->input_captchaType);
                $captchaType->required = 1;
                $captchaType->notes = $this->_('Most visitors do not like CAPTCHAS, so it is recommended to use it only if you have problems with spam. If a CAPTCHA is enabled and you want to disable it on a certain form, please use the following method:');
                $width = in_array($this->input_captchaType, ['DefaultImageCaptcha', 'SliderCaptcha']) ? 50 : 33;
                $captchaType->columnWidth = $width;
                $fieldsetbasic->add($captchaType, $inputfields);

                // set the width of the captcha image (only on text CAPTCHAS)
                $captchaWidth = $this->wire('modules')->get('InputfieldInteger');
                $captchaWidth->label = $this->_('Image width');
                $captchaWidth->description = $this->_('Please enter the width of the CAPTCHA image.');
                $captchaWidth->attr('name', 'input_captchaWidth');
                $captchaWidth->attr('type', 'number');
                $captchaWidth->attr('value', $this->input_captchaWidth);
                $captchaWidth->attr('min', 10);
                $captchaWidth->attr('max', 900); // images are 900*600px, so set max width to 900px
                $width = in_array($this->input_captchaType, ['DefaultImageCaptcha', 'SliderCaptcha']) ? 50 : 33;
                $captchaWidth->columnWidth = $width;
                $captchaWidth->required = 1;
                $captchaWidth->showIf = "input_captchaType!=none|SimpleQuestionCaptcha|SliderCaptcha";
                $fieldsetbasic->add($captchaWidth, $inputfields);

                // set height of the captcha image
                $captchaHeight = $this->wire('modules')->get('InputfieldInteger');
                $captchaHeight->description = $this->_('Please enter the height of the CAPTCHA image.');
                $captchaHeight->label = $this->_('Image height');
                $captchaHeight->attr('name', 'input_captchaHeight');
                $captchaHeight->attr('type', 'number');
                $captchaHeight->attr('value', $this->input_captchaHeight);
                $captchaHeight->attr('min', 10);
                $captchaHeight->columnWidth = 33;
                $captchaHeight->requiredIf = "input_captchaType=SimpleQuestionCaptcha";
                $captchaHeight->showIf = "input_captchaType!=none|DefaultImageCaptcha|SimpleQuestionCaptcha|SliderCaptcha";
                $fieldsetbasic->add($captchaHeight, $inputfields);

                // set the offset of the puzzle piece (only on slider CAPTCHA)
                $captchaOffset = $this->wire('modules')->get('InputfieldInteger');
                $captchaOffset->label = $this->_('Offset');
                $captchaOffset->description = $this->_('Please set the offset in px for the puzzle piece.');
                $captchaOffset->notes = $this->_('The lower the value, the more precisely the puzzle piece must be placed (highest allowed value: 25)');
                $captchaOffset->attr('name', 'input_offset');
                $captchaOffset->attr('type', 'number');
                $captchaOffset->attr('value', $this->input_offset);
                $captchaOffset->attr('min', 0);
                $captchaOffset->attr('max', 25); // a max offset of 25px is allowed
                $captchaOffset->columnWidth = 50;
                $captchaOffset->required = 1;
                $captchaOffset->requiredIf = "input_captchaType=SliderCaptcha";
                $captchaOffset->showIf = "input_captchaType=SliderCaptcha";
                $fieldsetbasic->add($captchaOffset, $inputfields);

                // set the question field
                $question = $this->wire('modules')->get('InputfieldText');
                $question->description = $this->_('Please enter a simple question.');
                $question->label = $this->_('Question');
                $question->notes = $this->_('The question should be as simple as possible.');
                $question->placeholder = $this->_('For example: What color has a green apple?');
                $question->attr('name', 'input_question');
                $question->attr('value', $this->input_question);
                $question->columnWidth = 50;
                $question->useLanguages = true;
                $question->showIf = "input_captchaType=SimpleQuestionCaptcha";
                $question->required = 1;
                $question->requiredIf = "input_captchaType=SimpleQuestionCaptcha";
                $fieldsetbasic->add($question, $inputfields);

                // set the answer field
                $answers = $this->wire('modules')->get('InputfieldTextArea');
                $answers->description = $this->_('Please enter various accepted answers (each on a separate line!!).');
                $answers->label = $this->_('Accepted answers');
                $answers->notes = $this->_('You can enter as many possible answers as you want, but at least one. You do not have to pay attention to upper and lower case letters (For example: "Green" ist the same as "green").');
                $answers->placeholder = $this->_('Enter serveral answers (each on a new line) that will be accepted. For example: green, color green, is green');
                $answers->attr('name', 'input_answers');
                $answers->attr('value', $this->input_answers);
                $answers->columnWidth = 50;
                $answers->required = 1;
                $answers->requiredIf = "input_captchaType=SimpleQuestionCaptcha";
                $answers->useLanguages = true;
                $answers->showIf = "input_captchaType=SimpleQuestionCaptcha";
                $fieldsetbasic->add($answers, $inputfields);

                $fieldsetsecurity5->add($fieldsetbasic, $inputfields);

                // BACKGROUND-SETTINGS
                $fieldsetBackgroundSettings = $this->wire('modules')->get('InputfieldFieldset');
                $fieldsetBackgroundSettings->label = $this->_('Image background settings');
                $fieldsetBackgroundSettings->collapsed = 1;// by default, this fieldset should be collapsed
                $fieldsetBackgroundSettings->description = $this->_('Set the styling of the background for the CAPTCHA image.');
                $fieldsetBackgroundSettings->showIf = "input_captchaType!=none|DefaultImageCaptcha|slider";

                // Random or custom colors
                $bgcolorchooser = $this->wire('modules')->get('InputfieldRadios');
                $bgcolorchooser->label = $this->_('Random or custom colors');
                $bgcolorchooser->description = $this->_('Select if you want to use (a) certain color(s) or (a) random color(s) for the background.');
                $bgcolorchooser->notes = $this->_('If you want to adapt the color(s) to your project design, it is recommended to use custom color(s) instead of random.');
                $bgcolorchooser->attr('name', 'input_bgcolorchooser');
                $bgcolorchooser->attr('value', $this->input_bgcolorchooser);
                $bgcolorchooser->addOption('custom', $this->_('Custom color(s)'));
                $bgcolorchooser->addOption('random', $this->_('Random color(s)'));
                $bgcolorchooser->required = 1;
                $bgcolorchooser->columnWidth = 50;
                $fieldsetBackgroundSettings->add($bgcolorchooser, $inputfields);

                // set the number of colors for the distortion lines
                $bgnumberOfColors = $this->wire('modules')->get('InputfieldInteger');
                $bgnumberOfColors->label = $this->_('Number of colors');
                $bgnumberOfColors->description = $this->_('Select how much random colors should be used for the background');
                $bgnumberOfColors->notes = $this->_('If set to 0, then there is no limit for the colors, but it is recommended not to set the value too high. A good starting point will be 5.');
                $bgnumberOfColors->attr('name', 'input_bgnumberOfColors');
                $bgnumberOfColors->attr('type', 'number');
                $bgnumberOfColors->attr('value', $this->input_bgnumberOfColors);
                $bgnumberOfColors->attr('min', 0);
                $bgnumberOfColors->required = 1;
                $bgnumberOfColors->columnWidth = 25;
                $bgnumberOfColors->showIf = "input_bgcolorchooser=random";
                $fieldsetBackgroundSettings->add($bgnumberOfColors, $inputfields);

                // Custom colors for the background
                $bgCustomColors = wire('modules')->get('InputfieldTextArea');
                $bgCustomColors->label = $this->_('The color(s) for the background');
                $bgCustomColors->description = $this->_('Set the colors for the background in HEX color format (fe #ddd). Each color must be written on a new line.');
                $bgCustomColors->notes = $this->_('At least one color is required, but it is recommended to use more than 1 color to make the background more inhomogeneous and therefore more difficult for spam bots to read the content');
                $bgCustomColors->attr('name', 'input_bgCustomColors');
                $bgCustomColors->attr('value', $this->input_bgCustomColors);
                $bgCustomColors->columnWidth = 25;
                $bgCustomColors->required = 1;
                $bgCustomColors->showIf = "input_bgcolorchooser=custom";
                $fieldsetBackgroundSettings->add($bgCustomColors, $inputfields);

                $fieldsetsecurity5->add($fieldsetBackgroundSettings, $inputfields);

                $fieldsetTextCaptcha = $this->wire('modules')->get('InputfieldFieldset');
                $fieldsetTextCaptcha->label = $this->_('Character settings');
                $fieldsetTextCaptcha->collapsed = 1;// by default, this fieldset should be collapsed
                $fieldsetTextCaptcha->description = $this->_('Set the styling of the text (character string or calculation) based on your own preferences.');
                $fieldsetTextCaptcha->showIf = "input_captchaType!=none|DefaultImageCaptcha|slider";

                // Select the font family
                $refreshLink = $this->wire('modules')->get('InputFieldSubmit');
                $refreshLink->attr('name', 'input_submit_refreshFonts_frontendforms');
                $refreshLink->attr('value', 'refresh');
                $refreshLink->setSmall();
                $refreshLink->setSecondary();
                $refreshLink->text = $this->_('Refresh all font files');

                $captchaFontFamily = $this->wire('modules')->get('InputfieldSelect');
                $captchaFontFamily->attr('name', 'input_captchaFontFamily');
                $captchaFontFamily->label = $this->_('Font family');
                $captchaFontFamily->description = $this->_('Select the font family for the text.');
                $captchaFontFamily->addOptions($this->input_captchaFonts);
                $captchaFontFamily->attr('value', $this->input_captchaFontFamily);
                $captchaFontFamily->required = 1;
                $captchaFontFamily->columnWidth = 34;
                $captchaFontFamily->notes = $this->_('If there are no files available in the input field or you have transferred the site, please click the button below to refresh all font files.');

                $captchaFontFamily->appendMarkup('<div>' . $refreshLink->render() . '</div>');
                $fieldsetTextCaptcha->add($captchaFontFamily, $inputfields);

                // set number of the fontsize
                $captchaFontsize = $this->wire('modules')->get('InputfieldInteger');
                $captchaFontsize->label = $this->_('Font size');
                $captchaFontsize->description = $this->_('Set the font size for the text.');
                $captchaFontsize->attr('name', 'input_captchaFontsize');
                $captchaFontsize->attr('type', 'number');
                $captchaFontsize->attr('value', $this->input_captchaFontsize);
                $captchaFontsize->attr('min', 1);
                $captchaFontsize->required = 1;
                $captchaFontsize->columnWidth = 33;
                $fieldsetTextCaptcha->add($captchaFontsize, $inputfields);

                // CAPTCHA text color
                $captchaTextColor = wire('modules')->get('InputfieldText');
                $captchaTextColor->label = $this->_('Font color');
                $captchaTextColor->description = $this->_('Set the color for the text.');
                $captchaTextColor->notes = $this->_('Please enter a valid HEX color code.');
                $captchaTextColor->attr('name', 'input_captchaTextColor');
                $captchaTextColor->attr('value', $this->input_captchaTextColor);
                $captchaTextColor->required = 1;
                $captchaTextColor->columnWidth = 33;
                $fieldsetTextCaptcha->add($captchaTextColor, $inputfields);

                // Set the characters that should be used to create the CAPTCHA text
                $input_captchaCharset = $this->wire('modules')->get('InputfieldTextarea');
                $input_captchaCharset->label = $this->_('Characterset');
                $input_captchaCharset->description = $this->_('Enter the characters, that should be used to create a random text for CAPTCHAS.');
                $input_captchaCharset->attr('name', 'input_captchaCharset');
                $input_captchaCharset->attr('value', $this->input_captchaCharset);
                $input_captchaCharset->columnWidth = 34;
                $input_captchaCharset->required = 1;
                $input_captchaCharset->showIf = "input_captchaType!=SimpleMathTextCaptcha";
                $fieldsetTextCaptcha->add($input_captchaCharset, $inputfields);

                // set the number of characters for text CAPTCHA
                $captchaNumberOfCharacters = $this->wire('modules')->get('InputfieldInteger');
                $captchaNumberOfCharacters->label = $this->_('Number of characters');
                $captchaNumberOfCharacters->description = $this->_('Enter the number of character you want the text to consist of (A recommended value is 4 or 5).');
                $captchaNumberOfCharacters->attr('name', 'input_captchaNumberOfCharacters');
                $captchaNumberOfCharacters->attr('value', $this->input_captchaNumberOfCharacters);
                $captchaNumberOfCharacters->attr('type', 'number');
                $captchaNumberOfCharacters->attr('min', 4);
                $captchaNumberOfCharacters->columnWidth = 33;
                $captchaNumberOfCharacters->required = 1;
                $captchaNumberOfCharacters->showIf = "input_captchaType!=SimpleMathTextCaptcha";
                $fieldsetTextCaptcha->add($captchaNumberOfCharacters, $inputfields);

                //Show characters off the line
                $charactersOffLine = $this->wire('modules')->get('InputfieldCheckbox');
                $charactersOffLine->attr('name', 'input_charactersOffLine');
                $charactersOffLine->attr('checked', $this->input_charactersOffLine ? 'checked' : '');
                $charactersOffLine->label = $this->_('Characters not in one line');
                $charactersOffLine->label2 = $this->_('Position characters randomly');
                $charactersOffLine->description = $this->_('If checked, the characters the text consists of will not be displayed in one line. They will be displayed randomly in various positions and angles (recommended).');
                $charactersOffLine->columnWidth = 33;
                $fieldsetTextCaptcha->add($charactersOffLine, $inputfields);

                $fieldsetsecurity5->add($fieldsetTextCaptcha, $inputfields);

                // DISTORTION LINES
                $fieldsetDistortionlines = $this->wire('modules')->get('InputfieldFieldset');
                $fieldsetDistortionlines->label = $this->_('Distortion lines');
                $fieldsetDistortionlines->collapsed = 1; // by default, this fieldset should be collapsed
                $fieldsetDistortionlines->description = $this->_('Add distortion lines over the image to make it more difficult for spam bots to read the content.');
                $fieldsetDistortionlines->showIf = "input_captchaType!=none|slider";

                // Set the number of distortion lines
                $captchaNumberOfLines = $this->wire('modules')->get('InputfieldInteger');
                $captchaNumberOfLines->label = $this->_('Number of distortion lines');
                $captchaNumberOfLines->description = $this->_('Set how many lines should be drawn over the image.');
                $captchaNumberOfLines->notes = $this->_('If set to 0 then this feature is disabled. Max number is 100. You can enter the number in steps of 5. Afterwards check it on the frontend by refreshing the CAPTCHA multiple times, if the amount of lines is too low or to high.');
                $captchaNumberOfLines->attr('name', 'input_captchaNumberOfLines');
                $captchaNumberOfLines->attr('type', 'number');
                $captchaNumberOfLines->attr('value', $this->input_captchaNumberOfLines);
                $captchaNumberOfLines->attr('min', 0);
                $captchaNumberOfLines->attr('max', 100);
                $captchaNumberOfLines->attr('step', 5);
                $captchaNumberOfLines->required = 1;
                $captchaNumberOfLines->columnWidth = 33;
                $fieldsetDistortionlines->add($captchaNumberOfLines, $inputfields);

                // Random or custom colors
                $colorchooser = $this->wire('modules')->get('InputfieldRadios');
                $colorchooser->label = $this->_('Random or custom colors');
                $colorchooser->description = $this->_('Select if you want to use (a) certain color(s) or (a) random color(s) for the lines.');
                $colorchooser->notes = $this->_('If you want to adapt the color(s) to your project design, it is recommended to use custom color(s) instead of random.');
                $colorchooser->attr('name', 'input_colorchooser');
                $colorchooser->attr('value', $this->input_colorchooser);
                $colorchooser->addOption('custom', $this->_('Custom colors'));
                $colorchooser->addOption('random', $this->_('Random colors'));
                $colorchooser->required = 1;
                $colorchooser->showIf = "input_captchaNumberOfLines>0";
                $colorchooser->columnWidth = 33;
                $fieldsetDistortionlines->add($colorchooser, $inputfields);

                // set the number of colors for the distortion lines
                $numberOfColorsOfLines = $this->wire('modules')->get('InputfieldInteger');
                $numberOfColorsOfLines->label = $this->_('Number of colors');
                $numberOfColorsOfLines->description = $this->_('Select how much random colors should be used for the lines.');
                $numberOfColorsOfLines->notes = $this->_('If you enter the value 0, then the number of colors used is equal to the number of distortion lines. On the other hand, the entered value corresponds to the number of colors that are used.');
                $numberOfColorsOfLines->attr('name', 'input_numberOfColorsOfLines');
                $numberOfColorsOfLines->attr('value', $this->input_numberOfColorsOfLines);
                $numberOfColorsOfLines->attr('type', 'number');
                $numberOfColorsOfLines->attr('min', 0);
                $numberOfColorsOfLines->required = 1;
                $numberOfColorsOfLines->columnWidth = 17;
                $numberOfColorsOfLines->showIf = "input_captchaNumberOfLines>0,input_colorchooser=random";
                $fieldsetDistortionlines->add($numberOfColorsOfLines, $inputfields);

                // Custom colors
                $captchaLinesColor = $this->wire('modules')->get('InputfieldTextArea');
                $captchaLinesColor->label = $this->_('The color(s) for the lines above the image');
                $captchaLinesColor->description = $this->_('Set the colors for the lines in HEX color format (fe #000). Each color must be written on a new line.');
                $captchaLinesColor->notes = $this->_('At least one color is required, but it is recommended to use more than 1 color to make the lines more inhomogeneous and therefore more difficult for spam bots to read the content.');
                $captchaLinesColor->attr('name', 'input_captchaLinesColor');
                $captchaLinesColor->attr('value', $this->input_captchaLinesColor);
                $captchaLinesColor->columnWidth = 17;
                $captchaLinesColor->required = 1;
                $captchaLinesColor->showIf = "input_captchaNumberOfLines>0,input_colorchooser=custom";
                $fieldsetDistortionlines->add($captchaLinesColor, $inputfields);

                $fieldsetsecurity5->add($fieldsetDistortionlines, $inputfields);

                // IMAGE FILTERS
                $fieldsetImagefilters = $this->wire('modules')->get('InputfieldFieldset');
                $fieldsetImagefilters->label = $this->_('Image filters');
                $fieldsetImagefilters->collapsed = 1; // by default, this fieldset should be collapsed
                $fieldsetImagefilters->description = $this->_('Add filters to images to make it more difficult to identify the content.');
                $fieldsetImagefilters->showIf = "input_captchaType=DefaultImageCaptcha";

                // Blur filter
                $blurlevel = $this->wire('modules')->get('InputfieldInteger');
                $blurlevel->label = $this->_('Blur');
                $blurlevel->description = $this->_('Blur the image by selecting the blur value: The higher the value, the stronger the blur effect.');
                $blurlevel->notes = $this->_('If you enter the value 0, then the blur effect is disabled. The maximum value is 10.');
                $blurlevel->attr('name', 'input_blurlevel');
                $blurlevel->attr('value', $this->input_blurlevel);
                $blurlevel->attr('type', 'number');
                $blurlevel->attr('min', 0);
                $blurlevel->attr('max', 10);
                $blurlevel->required = 1;
                $fieldsetImagefilters->add($blurlevel, $inputfields);

                // Pixelate filter
                $pixelatelevel = $this->wire('modules')->get('InputfieldInteger');
                $pixelatelevel->label = $this->_('Pixelate');
                $pixelatelevel->description = $this->_('Pixelate the image by selecting the pixelate value: The higher the value, the stronger the pixelate effect.');
                $pixelatelevel->notes = $this->_('If you enter the value 0, then the pixelate effect is disabled. The maximum value is 5.');
                $pixelatelevel->attr('name', 'input_pixelatelevel');
                $pixelatelevel->attr('value', $this->input_pixelatelevel);
                $pixelatelevel->attr('type', 'number');
                $pixelatelevel->attr('min', 0);
                $pixelatelevel->attr('max', 10);
                $pixelatelevel->required = 1;
                $fieldsetImagefilters->add($pixelatelevel, $inputfields);

                // 3 Grayscale filter
                $grayscale = $this->wire('modules')->get('InputfieldCheckbox');
                $grayscale->label = $this->_('Grayscale');
                $grayscale->label2 = $this->_('Remove colors from the image');
                $grayscale->description = $this->_('By clicking the box, all colors of the image will be removed.');
                $grayscale->attr('name', 'input_grayscale');
                $grayscale->attr('checked', $this->input_grayscale ? 'checked' : '');
                $fieldsetImagefilters->add($grayscale, $inputfields);

                $fieldsetsecurity5->add($fieldsetImagefilters, $inputfields);
            }

            $fieldset5->add($fieldsetsecurity5, $inputfields);

            $fieldset7 = $this->wire('modules')->get('InputfieldFieldset');
            $fieldset7->label = $this->_('Measure 6: Password field settings');
            $fieldset7->description = $this->_('Increase site security by checking passwords against a blacklist of popular passwords. This is useful if you offer user registration on your site to prevent users entering unsafe passwords.');
            $fieldset7->collapsed = 1;// by default, this fieldset should be collapsed

            $blacklist = wire('modules')->get('InputfieldTextArea');
            $blacklist->label = $this->_('Password blacklist');
            $desc = $this->_('Enter passwords, that are forbidden (each on a new line).') . ' ';
            $desc .= $this->_('This list will be used by the "safePassword" validator to validate a password field against unsafe passwords.') . ' ';
            $desc .= $this->_('The validator returns false, if the password was found on the blacklist, otherwise true.') . ' ';
            $desc .= $this->_('The list will be populated automatically with appropriate passwords from the top 100 passwords list below, but you can add your own passwords too - They will not get overwritten during the blacklistlist update.');
            $blacklist->description = $desc;
            $notes = sprintf($this->_('Current number of entries in the blacklist: %s.'), count($this->blacklist));
            if ($this->last_check) {
                $notes .= ' ' . sprintf($this->_('Last update of the blacklist: %s.'),
                        $this->wire('datetime')->date($this->default_dateformat, $this->last_check));
            }
            $blacklist->notes = $notes;
            $blacklist->attr('name', 'input_blacklist');
            $blacklist->attr('value', $this->input_blacklist);
            $fieldset7->add($blacklist, $inputfields);

            // load passwords from ....
            $pwlist = wire('modules')->get('InputfieldMarkup');
            // grab content from the page
            $content = '<h2>' . $this->_('List of top 100 most common passwords') . '</h2>';
            $content .= '<p>' . $this->_('The passwords in the list below are unsafe and a serious security issue for each account on your site.') . '<br>';
            $osaplink = '<a href="https://owasp.org/" target="_blank">OSAP</a>';
            $content .= sprintf($this->_('All passwords were taken from %s (Open Web Application Security Project).'),
                    $osaplink) . '<br>';
            $gitlink = '<a href="https://github.com/danielmiessler/SecLists/blob/master/Passwords/Common-Credentials/10-million-password-list-top-100.txt" target="_blank">https://github.com/danielmiessler/SecLists/blob/master/Passwords/Common-Credentials/10-million-password-list-top-100.txt</a>';
            $content .= sprintf($this->_('Source of the passwords: %s'), $gitlink) . '</p><hr>';
            $hintText = '<h3>' . $this->_('Please note:') . '</h3>';
            $hintText .= '<p>' . $this->_('Only passwords that matches your password requirements will be added to the blacklist after pressing the update button or during the automatic update.') . '<br>';
            $hintText .= $this->_('Passwords which do not fulfill your password requirements, do not need to be on the list and will be filtered out before. The blacklist should be as short as possible to prevent performance issues.') . '<br>';
            $hintText .= $this->_('If your blacklist is very long, it would be better to increase the password requirements.') . '<br>';
            $hintText .= $this->_('If no passwords from this list will be added does not mean that it would not work - it means that your password requirements are high enough to filter out all of these passwords before.') . '</p>';
            // get password requirements
            $hintText .= '<h3>' . $this->_('Current password requirements settings:') . '</h3>';
            $hintText .= '<p>' . $this->_('A password must contain at least one of the following characters:') . '</p><ul>';

            if ($this->password_field->requirements) {


                if (!$this->password_field->requirementsLabels) {
                    $requirementsLabels = wire('modules')->get('InputfieldPassword')->requirementsLabels;
                } else {
                    $requirementsLabels = $this->password_field->requirementsLabels;
                }

                foreach ($this->password_field->requirements as $label) {
                    if (array_key_exists($label, $requirementsLabels))
                        $hintText .= '<li>' . $requirementsLabels[$label] . '</li>';
                }
            } else {
                $hintText .= '<li>' . $this->_('No password requirements have been set!') . '</li>';
            }

            $hintText .= '</ul>';
            $link = '<a title="' . $this->_('To the password field edit page') . '" href="' . $this->password_field->editUrl() . '">';
            $link .= $this->_('here') . '</a>';
            $hintText .= '<p>' . sprintf($this->_('If you have the permission to change the password requirements, you can do it %s.'),
                    $link) . '</p>';

            // information about the last update of the list
            $update = $this->_('The password list will be checked once a month automatically if something has been changed on GitHub.');
            $updatedata = '';

            if ($this->toppasswords_download) {
                $updatedata .= '<li>' . sprintf($this->_('Last download date: %s (%s).'),
                        $this->wire('datetime')->date($this->default_dateformat, filemtime($this->passwordPath)),
                        $this->wire('datetime')->date('relative', filemtime($this->passwordPath))) . '</li>';
            }
            if ($this->github_modified) {
                $updatedata .= '<li>' . sprintf($this->_('Last modification date on GitHub: %s (%s).'),
                        $this->wire('datetime')->date($this->default_dateformat, $this->github_modified),
                        $this->wire('datetime')->date('relative', $this->github_modified)) . '</li>';
            }
            if ($this->last_check) {
                $updatedata .= '<li>' . sprintf($this->_('Last check for passwords date: %s (%s).'),
                        $this->wire('datetime')->date($this->default_dateformat, $this->last_check),
                        $this->wire('datetime')->date('relative', $this->last_check)) . '</li>';
            }

            $update .= '<ul>' . $updatedata . '</ul>';
            $content .= '<p>' . $update . '</p>';
            $content .= '<p>' . $this->_('After the check, all passwords that fulfill your password requirements and are not on your blacklist, will be added automatically.') . '<br>';
            $content .= $this->_('You do not need to add them manually.') . '</p><hr>';
            $content .= $this->_('If you do not want to wait until the next automatic update, you can update your blacklist manually by pressing the button below.') . '</p>';

            // Create a button to add the passwords to the blacklist
            $button = $this->wire('modules')->get('InputfieldSubmit');
            $button->name = 'submit_save_passwordblacklist';
            $button->value = 'add';
            $button->text = $this->_('Update blacklist manually');
            $content .= $button->render();

            $content .= '<div class="uk-alert-warning" data-uk-alert>' . $hintText . '</div>';

            // create an HTML ol list of passwords
            if ($this->passwordList) {
                // if the list is longer than 100, cut all passwords after number 100
                $arr = array_filter($this->passwordList);
                $pos = array_search('100', array_keys($arr));
                $list = array_slice($arr, 0, $pos, true);
                $content .= '<h3>' . sprintf($this->_('Top 100 most common passwords in %s (Last list update on GitHub: %s)'),
                        date('Y'),
                        $this->wire('datetime')->date($this->default_dateformat, $this->github_modified)) . '</h3>';
                $items = '';
                foreach ($list as $password) {
                    $class = (in_array($password, $this->blacklist)) ? 'active notes' : 'inactive';
                    $items .= '<li class="' . $class . '">' . $password . '</li>';
                }
                $content .= '<div id="pw-container"><ol id="password-list">' . $items . '</ol><hr>';
                $content .= '<p>' . $this->_('Passwords with a colored background are on your blacklist.') . '</p>';
                $content .= '</div>';
            } else {
                $content .= $this->_('Sorry, but the file passwords.txt does not exist. Please press the update button above.');
            }

            $pwlist->value = $content;
            $fieldset7->add($pwlist, $inputfields);

            $fieldset5->add($fieldset7, $inputfields);

            $fieldset8 = $this->wire('modules')->get('InputfieldFieldset');
            $fieldset8->label = $this->_('Measure 7: HTML5 browser validation');
            $fieldset8->collapsed = 1;// by default, this fieldset should be collapsed
            $fieldset8->description = $this->_('Use HTML5 browser validation in addition to server side validation.');

            // HTML 5 form validation
            $html5_validation = $this->wire('modules')->get('InputfieldCheckbox');
            $html5_validation->attr('name', 'input_html5_validation');
            $html5_validation->attr('checked', $this->input_html5_validation == '1' ? 'checked' : '');
            $html5_validation->label = $this->_('Enable HTML5 browser validation in addition to the server side validation.');
            $html5_validation->checkboxLabel = $this->_('Enable HTML 5 browser validation');
            $html5_validation->description = $this->_('If the box is checked, the form will be validated by the browser at the frontend using HTML5 attributes');
            $html5_validation->notes = $this->_('The form will be validated on the server in any case, but you can also use HTML5 browser validation so that the form values are validated before they are sent to the server.');
            $fieldset8->add($html5_validation, $inputfields);
            $fieldset5->add($fieldset8, $inputfields);

            $inputfields->add($fieldset5);

            $fieldset6 = $this->wire('modules')->get('InputfieldFieldset');
            $fieldset6->label = $this->_('Statistics of blocked visitors');
            $fieldset6->description = $this->_('Get information about blocked visitors (IP, form) from the log files');
            $fieldset6->collapsed = 1;
            $fieldset6->icon = 'fa-bar-chart';

            // grab data from the log file if present

            $stat = $this->wire('modules')->get("InputfieldMarkup");
            $stat->attr('name', 'statistics');
            $stat->label = "";
            if ($this->wire('log')->exists('Failed-attempts-frontendforms')) {

                $logs = $this->wire('log')->getEntries('failed-attempts-frontendforms');

                $result = array();
                foreach ($logs as $element) {
                    $date = $element['date'];
                    $url = $element['url'];
                    $user = $element['user'];
                    $text = json_decode($element['text']);
                    $ip = $text->IP;
                    (isset($result[$ip])) ? $result[$ip]['count'] += 1 : $result[$ip] = array(
                        'data' => $date,
                        'user' => $user,
                        'url' => $url,
                        'count' => 1
                    );
                }
                // sort array by count descending
                array_multisort(array_column($result, 'count'), SORT_DESC, SORT_NUMERIC, $result);
                // output table
                $value = $this->executeTable($result);
            } else {
                $value = $this->_('Nothing to show - logfile does not exist');
            }
            // show a hint to the user if logging failed attempts is not enabled
            if ((!$this->input_logFailedAttempts) || ($this->input_maxAttempts < 1)) {
                $hint_text = '<p>' . $this->_('Logging of failed attempts is not enabled. If you want to use this feature, you need to enable it inside "Measure 1: Restrict number of failed attempts".');
                $hint_text .= '<br>' . $this->_('"Max number of failed attempts" must be higher than 0 and  the checkbox "Log failed attempts" must be enabled.') . '</p>';
                $hint_text .= '<p><a id="enable-logging" href="#spam">' . $this->_('Go to the settings to enable logging of failed attemtps') . '</a></p>';
                $value .= '<div class="uk-alert-warning" data-uk-alert>' . $hint_text . '</div>';
            }

            $stat->value = '<p>' . $value . '</p>';
            $fieldset6->append($stat);

            $inputfields->add($fieldset6);

        }

        /**
         * Create new directory and copy files from another directory to this directory
         * Afterwards delete the old directory
         * These files are images for email templates
         * @param string $from
         * @param string $to
         * @return void
         * @throws WireException
         */
        protected function createFilesDir(string $from, string $to): void
        {
            // if a directory exists or directory was created successfully
            if (($this->wire('files')->exists($to)) || ($this->wire('files')->mkdir($to))) {
                // check if files exists in the modules assets folder
                if ($this->wire('files')->exists($from)) {
                    // scan directory if it contains files
                    $files = $this->wire('files')->find($from);
                    if ($files) {
                        // copy all files to the newly created FrontendForms directory under site/assets/files
                        $this->wire('files')->copy($from, $to);
                        // now remove the assets folder and its content form FrontendForms/assets
                        $this->wire('files')->rmdir($from, true);
                    }
                }
            }
        }

        /**
         * Copy/Remove the captchaimage.php from the root and copy it back to
         * site/modules/FrontendForms/Formelements/Captcha/captchaimage.php
         * @param bool $install
         * @return void
         * @throws WireException
         */
        protected function createRemoveCaptchaImageFile(bool $install): void
        {
            $moduleFile = $this->modulePath . 'Formelements/Captcha/captchaimage.php';
            $rootFile = $this->wire('config')->paths->root . 'captchaimage.php';
            $from = $install ? $moduleFile : $rootFile;
            $to = $install ? $rootFile : $moduleFile;

            if ($this->wire('files')->copy($from, $to)) {
                if (!is_writable($to) && $install) {
                    // captcha file could not be copied to the root folder
                    $warning_text[] = sprintf($this->_('The captchaimage.php file could not be copied to the root directory (%s), because the root directory is not writeable.'), $this->wire('config')->paths->root);
                    $warning_text[] = sprintf($this->_('Do not be worry! To fix this issue, please move the file from "/site/modules/FrontendForms/Formelements/Captcha/captchaimage.php" to "%s" by yourself.'), $to);
                    $warning_text[] = $this->_('Otherwise you will get an error if you try to use the CAPTCHA on your forms.');
                    $this->wire('session')->warning(implode('<br>', $warning_text), Notice::allowMarkup);
                }
            }
            // try to unlink the file on uninstallation
            try {
                // unlink the captcha.php file
                $this->wire('files')->unlink($from);
            } catch (Exception $ex) {
                $this->wire('session')->warning($ex);
            }

        }

        /**
         * Run during installation
         * @return void
         * @throws WireException
         */
        public function ___install(): void
        {


            //save default module configurations on install
            $data = self::getDefaultData();
            //save the path to the default font file manually to the config data
            $data['input_captchaFontFamily'] = $this->modulePath . 'Formelements/Captcha/fonts/OpenSans-SemiBold.ttf';
            // save all other ttf fonts to the db
            $data['input_captchaFonts'] = $this->findAllFontfiles();

            if ($this->downloadPasswordsFromGitHub()) { // first download the file from GitHub
                $data['toppasswords_download'] = $this->wire('datetime')->date($this->default_dateformat);
                $data['last_check'] = $this->wire('datetime')->date($this->default_dateformat);
                // load password list data from GitHub (https://github.com/danielmiessler/SecLists/blob/master/Passwords/Common-Credentials/10-million-password-list-top-100.txt)
                $githubdata = $this->getDataFromGitHub(self::LAST_PASSWORDS_MODIFICATION_URL); //load JSON data from the file
                $last_update = $githubdata[0]->commit->author->date; // last modification date on GitHub
                $data['github_modified'] = $this->wire('datetime')->date($this->default_dateformat, $last_update);
                $this->password_field = wire('fields')->get('pass');
                $this->password_object = new InputfieldPassword();
                // for the case that property requirements is not stored inside the db at this moment
                $requirements = $this->password_field->requirements ?? ["letter", "digit"];
                $this->password_object->requirements = $requirements;
                $passwordsArray = $this->createArrayOfTxtFile($this->passwordPath);
                $data['input_blacklist'] = $this->cleanUpPasswordList($passwordsArray);
                $this->input_blacklist = $data['input_blacklist'];
            }
            // save the config data to the db
            wire('modules')->saveConfig($this, $data);

            // copy files from FrontendForms/assets to site/assets/files/Frontendforms
            $to = $this->wire('config')->paths->assets . 'files/FrontendForms/';
            $from = $this->modulePath . 'assets/';

            $this->createFilesDir($from, $to);

            // copy captchaimage.php from site/modules/FrontendForms/Formfields/captcha/ to the root dir
            $this->createRemoveCaptchaImageFile(true);

            // create temp_uploads folder
            $this->wire('files')->mkdir($this->temp_uploadPath);

            // create folder for the custom email templates
            if (!$this->wire('files')->exists($this->wire('config')->paths->site . 'frontendforms-custom-templates/', 'dir')) {
                $this->wire('files')->mkdir($this->wire('config')->paths->site . 'frontendforms-custom-templates/');
            }

            // create the custom frameworks classes folder
            $this->createCustomFrameworksFolder();

        }

        /**
         * Running some code after the module has been updated
         * @param $fromVersion
         * @param $toVersion
         * @return void
         * @throws \ProcessWire\WireException
         */
        public function ___upgrade($fromVersion, $toVersion): void
        {


            // copy new captchaimage.php to the root
            $this->createRemoveCaptchaImageFile(true);
            // create temp_uploads folder again
            $this->wire('files')->mkdir($this->temp_uploadPath);
            // copy files from FrontendForms/assets to site/assets/files/Frontendforms
            $to = $this->wire('config')->paths->assets . 'files/FrontendForms/';
            $from = $this->modulePath . 'assets/';
            $this->createFilesDir($from, $to);

            // create custom email template folder if it does not exist
            $this->wire('files')->mkdir($this->wire('config')->paths->site . 'frontendforms-custom-templates/');

            // create the custom frameworks classes folder
            $this->createCustomFrameworksFolder();
        }

        /**
         * Run during uninstallation
         * @return void
         * @throws WireException
         */
        public function ___uninstall(): void
        {
            // copy files from site/assets/files/Frontendforms to FrontendForms/assets
            $from = $this->wire('config')->paths->assets . 'files/FrontendForms/';
            $to = $this->modulePath . 'assets/';
            $this->createFilesDir($from, $to);
            $this->createRemoveCaptchaImageFile(false); // delete captchaimage.php from root
            // remove passwords.txt - should be downloaded on next installation
            $this->wire('files')->unlink($this->passwordPath);
        }

    }
